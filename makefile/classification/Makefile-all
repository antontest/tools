#/*************************************************************        
#FileName : makefile   
#FileFunc : Linux static, shared and execute binary generate
#Version  : V0.1        
#Author   : Antonio
#Date     : 2017-11-22   
#Descp    : Linux makefile template
#*************************************************************/     
# target
PROGRAM_NAME = 
TARGET_NAME  = $(PROGRAM_NAME)
TARGET_PATH  = .

# program type, 0 -- for static library, 1 -- for shared library, 2 -- for execute
PROGRAM_TYPE = 1

# output dir
OUTDIR = build

# source files
SRC_PATH      = .
UNIX_SRC_PATH =
WIN_SRC_PATH  =

# include
INC_PATH      = .
UNIX_INC_PATH =
WIN_INC_PATH  =

# search the lib which complied by myself
LIB_PATH      = .
UNIX_LIB_PATH = 
WIN_LIB_PATH  = 

# library names
LIB_NAME      =
UNIX_LIB_NAME =
WIN_LIB_NAME  = 

# other c, cpp and header files
C_FILE    = 
CPP_FILE  = 
HEAD_FILE = 

# other librarys
OTH_LIB =

# control whether link library and include, 1 -- for yes, 0 -- for no
LINK_TAR = 1
LINK_LIB = 1
LINK_INC = 1

#install path 
ifeq ("$(INSTALL_ROOT_PATH)", "")
INSTALL_ROOT_PATH = $(PROGRAM_NAME)_install
endif
ifeq ("$(INSTALL_INCLUDE_PATH)", "")
INSTALL_INCLUDE_PATH = include
endif
ifeq ("$(INSTALL_LIBRARY_PATH)", "")
INSTALL_LIBRARY_PATH = lib
endif
ifeq ("$(INSTALL_BIN_PATH)", "")
INSTALL_BIN_PATH = bin
endif

# system info
CUR_DIR  = $(shell basename `pwd`)
CUR_PATH = $(shell pwd)
MACHINE  = $(shell uname -m)
PLATFORM = $(strip $(call get_tool_chain_name,"$(CC)"))
DATE     = $(shell date +"%y_%m_%d")
VERSION  = 

# Make command to use for dependencies
MAKE    = make
RM      = rm
MKDIR   = mkdir
CC      = gcc
XX      = g++
AR      = ar
LN      = ln
INSTALL = install
DEPCMPL = $(CC)

# Warning
OPTM     = -O2
OTHER    = -Wno-unused -Wno-format
WARNING  = -Wall -Werror
CFLAGS  += $(WARNING)
OTHFLAGS = 

# support array sort
ifneq "$(HAVE_THREAD_VALUE)" "0"
CFLAGS   += -DHAVE_THREAD_VALUE
LIB_NAME += # threading
endif

# source of .c and .o
CSRC   = $(wildcard $(addsuffix /*.c,$(SRC_PATH))) $(UNIX_CSRC) $(WIN_CSRC)
CPPSRC = $(wildcard $(addsuffix /*.cpp,$(SRC_PATH))) $(UNIX_CPPSRC) $(WIN_CPPSRC)
COBJ   = $(addprefix $(OUTDIR)/,$(subst .c,.o,$(CSRC) $(C_FILE)))
CPPOBJ = $(addprefix $(OUTDIR)/,$(subst .cpp,.o,$(CPPSRC) $(CPP_FILE)))
HSRC   = $(wildcard $(addsuffix /*.h,$(SRC_PATH)))

# dependent files .d
CDEF   = $(patsubst %.c,${OUTDIR}/%.d,$(CSRC) $(C_FILE))
CPPDEF = $(patsubst %.cpp,${OUTDIR}/%.d,$(CPPSRC) $(CPP_FILE))

# -fpic for linux 64, WIN_LINK for windows
ifeq ("$(BUILD_FOR_WIN)", "")
OTHFLAGS   += -fpic
UNIX_CSRC   = $(wildcard $(addsuffix /*.c,$(UNIX_SRC_PATH)))
UNIX_CPPSRC = $(wildcard $(addsuffix /*.cpp,$(UNIX_SRC_PATH)))
LIBS_PATH  = $(addprefix -L ,$(LIB_PATH) $(UNIX_LIB_PATH))
INC         = $(addprefix -I ,$(INC_PATH) $(UNIX_INC_PATH))
LIB         = $(addprefix -l,$(LIB_NAME) $(UNIX_LIB_NAME))
else
WIN_CSRC   = $(wildcard $(addsuffix /*.c,$(WIN_SRC_PATH)))
WIN_CPPSRC = $(wildcard $(addsuffix /*.cpp,$(WIN_SRC_PATH)))
WIN_LINK   = -Wl,--export-all-symbols,--out-implib,$(WIN_IMPORT_LIB),--output-def,$(WIN_IMPORT_DEF)
LIBS_PATH  = $(addprefix -L ,$(LIB_PATH) $(WIN_LIB_PATH))
INC        = $(addprefix -I ,$(INC_PATH) $(WIN_INC_PATH))
LIB        = $(addprefix -l,$(LIB_NAME) $(WIN_LIB_NAME))
endif
LIB_FLAGS := $(LIBS_PATH) $(LIB) $(OTH_LIB)

# deal with cpp
ifneq "$(CPPOBJ)" ""
CFLAGS += -lstdc++

# make depend
DEPCMPL = $(XX)

else

# make depend
DEPCMPL = $(CC)

endif

# complie
# INC     = $(addprefix -I ,$(INC_PATH))
COMPILE = $(CFLAGS) $(OTHFLAGS) $(INC) -c $< -o $@ #$(OUTDIR)/$(*F).o

# header and target LINK
TARGET_LIB_PATH  = $(strip $(call find_dir,"libs"))
TARGET_INC_PATH  = $(strip $(call find_dir,"incs"))
FINAL_LIB_TARGET = $(TARGET_LIB_PATH)/$(TARGET_NAME)
FINAL_INC_TARGET = $(TARGET_INC_PATH)/$(CUR_DIR)

# generate target name
# $1 Library name
# $2 0 -- for static, 1 -- for shared, 2 -- for execute
# $3 build for win, 0 -- for unix, 1 -- for windows
define gen_name 
	$(shell \
		win=1 ; \
		name=$(1) ; \
		test -z "$(3)" && test $(2) -eq 0 && win=0 && ext=a ; \
		test -z "$(3)" && test $(2) -eq 1 && win=0 && ext=so ; \
		test -z "$(3)" && test $(2) -eq 2 && win=0 && ext= ; \
		test -n "$(3)" && test $(2) -eq 0 && win=1 && ext=a ; \
		test -n "$(3)" && test $(2) -eq 1 && win=1 && ext=dll ; \
		test -n "$(3)" && test $(2) -eq 2 && win=1 && ext=exe ; \
		prefix_lib=`echo $(1) | grep "^lib"` ; \
		test -z "$$prefix_lib" && test $(2) -ne 2 && name="lib"$(1) ; \
		test $(2) -eq 1 && test $$win -eq 0 && name=`echo $$name | sed "s/\.dll$$/\.so/g"` ; \
		test $(2) -eq 1 && test $$win -eq 1 && name=`echo $$name | sed "s/\.so$$/\.dll/g"` ; \
		test -n "$$ext" && suffix_ext=`echo $$name | grep "\.$$ext$$"` ; \
		test -n "$$ext" && test -z "$$suffix_ext" && name=$$name"."$$ext ; \
		echo $$name ; \
	)
endef

# gen target name and target 
TMP_NAME     = $(strip $(call gen_name,$(TARGET_NAME),$(PROGRAM_TYPE),$(BUILD_FOR_WIN)))
TARGET_NAME := $(strip $(TMP_NAME))
TARGET       = $(TARGET_PATH)/$(TARGET_NAME)

# install include
INSTALL_INC_HEADER   = $(addprefix $(INSTALL_ROOT_PATH)/$(INSTALL_INCLUDE_PATH)/,$(HSRC) $(HEAD_FILE))
UNINSTALL_INC_HEADER = $(addprefix $(INSTALL_ROOT_PATH)/$(INSTALL_INCLUDE_PATH)/,$(HSRC) $(HEAD_FILE))

# compile library
ifeq ($(PROGRAM_TYPE), 0)
LINK                   = $(AR) -rcs $@ $(COBJ) $(CPPOBJ)
DEFFLAGS               = $(CFLAGS)
INC_INSTALL_PERMISSION = 0444
LIB_INSTALL_PERMISSION = 0444
TARGET_INSTALL_PATH    = $(INSTALL_LIBRARY_PATH)
TARGET_INSTALL_FROM    = -p -D -m $(LIB_INSTALL_PERMISSION) $(TARGET)
else ifeq ($(PROGRAM_TYPE), 1)
LINK                   = $(CC) -shared -fpic $(WIN_LINK) $(CFLAGS) -o $@ $(COBJ) $(CPPOBJ) $(LIB_FLAGS)
DEFFLAGS               = $(CFLAGS)
INC_INSTALL_PERMISSION = 0444
LIB_INSTALL_PERMISSION = 0555
TARGET_INSTALL_PATH    = $(INSTALL_LIBRARY_PATH)
TARGET_INSTALL_FROM    = -p -D -m $(LIB_INSTALL_PERMISSION) $(TARGET)
WIN_IMPORT_LIB         = lib$(PROGRAM_NAME).lib
WIN_IMPORT_DEF         = lib$(PROGRAM_NAME).def
else 
LINK                    = $(CC) $(CFLAGS) -o $@ $(COBJ) $(CPPOBJ) $(LIB_FLAGS)
LIB_INSTALL_PERMISSION  = 0555
TARGET_INSTALL_PATH     = $(INSTALL_BIN_PATH)
TARGET_INSTALL_FROM     = -s $(TARGET) -p -D
INSTALL_INC_HEADER     :=
UNINSTALL_INC_HEADER   :=
endif
TARGET_INSTALL_TO = $(INSTALL_ROOT_PATH)/$(TARGET_INSTALL_PATH)/$(PLATFORM)/$(TARGET)
MAKEDEPEND = $(DEPCMPL) $(DEFFLAGS) -MM -MT

all:$(TARGET)
$(OUTDIR) :  
	-@$(call make_dir,$@)
$(CDEF) : 
	-@$(call make_dir,$(dir $@))
	$(MAKEDEPEND) $(subst .d,.o,$@) $(subst $(OUTDIR)/,,$(@:.d=.c)) > $@
$(CPPDEF) : 
	-@$(call make_dir,$(dir $@))
	$(MAKEDEPEND) $(subst .d,.o,$@) $(subst $(OUTDIR)/,,$(@:.d=.cpp)) > $@
depend :
	-$(RM) -f $(CDEF)
	-$(RM) -f $(CPPDEF)
	$(MAKE) $(CDEF)
	$(MAKE) $(CPPDEF)
$(COBJ) : 
	$(CC) $(COMPILE)
$(CPPOBJ) : 
	$(XX) $(COMPILE)
$(TARGET_PATH):
	-@$(call make_dir,$@)
$(TARGET) : $(OUTDIR) $(COBJ) $(CPPOBJ) $(TARGET_PATH) 
	$(LINK)
	-$(call link_lib,$(PROGRAM_TYPE),$(LINK_TAR),$(LINK_LIB),$(CUR_PATH)/$(TARGET_NAME),$(TARGET_LIB_PATH),$(TARGET_NAME))
	-$(call link_inc_dir,$(PROGRAM_TYPE),$(LINK_TAR),$(LINK_INC),$(CUR_PATH),$(TARGET_INC_PATH))
-include $(CDEF)
-include $(CPPDEF)

PHONY = rebuild clean cleanall install
.PHONY : $(PHONY)
# Rebuild this project
rebuild : clean all

# Clean this project
clean :
	-$(RM) -f $(COBJ) $(CPPOBJ)
	-$(RM) -f $(TARGET)
	-$(RM) -f $(FINAL_LIB_TARGET)
	-$(RM) -f $(FINAL_INC_TARGET)	

# Clean this project and all dependencies
cleanall : clean
	-$(RM) -f $(CDEF) $(CPPDEF)
	-$(RM) -f $(WIN_IMPORT_LIB) $(WIN_IMPORT_DEF)
	$(call remove_dir,$(OUTDIR))
	$(call remove_dir,$(TARGET_PATH))

# Install lib or share
install: $(INSTALL_INC_HEADER) 
	-$(INSTALL) $(TARGET_INSTALL_FROM)  $(TARGET_INSTALL_TO)
$(INSTALL_INC_HEADER):
	-$(INSTALL) -p -D -m $(INC_INSTALL_PERMISSION) $(subst $(INSTALL_ROOT_PATH)/$(INSTALL_INCLUDE_PATH)/,,$@) $@
uninstall: 
	-$(RM) -f $(UNINSTALL_INC_HEADER)
	-$(RM) -f $(TARGET_INSTALL_TO)

# make directory
define make_dir
	$(shell \
		if [ -n "$(1)" -a "$(1)" != "." -a ! -d $(1) ] ; then \
			mkdir -p $(1); \
		fi \
	)
endef

# make directory
define remove_dir
	$(shell \
		if [ "$(1)" != "." ] ; then \
			rm -rf $(1); \
		fi \
	)
endef

# find dir by name
# @1 directory name
define find_dir
	$(shell \
		find_path=`pwd`; \
		while [ "$$find_path" != $$HOME ]; do \
    		r=`find $$find_path -maxdepth 1 -iname "$(1)"` ; \
    		test -n "$$r" && echo $$r && exit 0; \
    		find_path=`dirname $$find_path`; \
		done; \
	)
endef

# get compile tool chain name
define get_tool_chain_name
	$(shell \
		set +x; \
		tool_chain=$(1); \
		name=""; \
		if [ "$$tool_chain" = "i686-w64-mingw32-gcc" ] ; then \
			name="mingw32"; \
		else \
			name=`$(1) --version | sed -n "/gcc/s/.*gcc\ *(\(.*\))/\1/p" | awk -F ' ' '{print $$1}'`; \
		fi ; \
		if [ -z "$$name" ] ; then \
			name="unkown"; \
		fi ; \
		echo "$$name"; \
	)
endef

# link library
# 1 -- param type
# 2 -- link target flag
# 3 -- link library flag
# 4 -- from path
# 5 -- target path
# 6 -- target name
define link_lib
	$(shell \
		set +x; \
		type=$(1);\
		link_tar=$(2);\
		link_lib=$(3);\
		from_path=$(4);\
		target_path=$(5);\
		target_name=$(6);\
		if [ $$type -gt 1 -o $$link_tar -ne 1 -o $$link_lib -ne 1 -o -z $$from_path ] ; then \
			exit 0; \
		fi ;\
		if [ -z "$$target_path" ] ; then \
			exit 0; \
		fi ;\
		if [ ! -e $$target_path ] ; then \
			exit 0; \
		fi ;\
		ln -sf $$from_path $$target_path/$$target_name; \
	)
endef

# link include directory
# 1 -- param type
# 2 -- link target flag
# 3 -- link include flag
# 4 -- from path
# 5 -- target path
define link_inc_dir
	$(shell \
		set +x; \
		type=$(1);\
		link_tar=$(2);\
		link_lib=$(3);\
		from_path=$(4);\
		target_path=$(5);\
		if [ $$type -gt 1 -o $$link_tar -ne 1 -o $$link_lib -ne 1 -o -z $$from_path ] ; then \
			exit 0; \
		fi ;\
		if [ -z "$$target_path" ] ; then \
			exit 0; \
		fi ;\
		if [ ! -e $$target_path ] ; then \
			exit 0; \
		fi ;\
		ln -sf $$from_path $$target_path/; \
	)
endef

# $(shell test $(PROGRAM_TYPE) -ne 2 && test $(#TARGET_LIB_PATH) -gt 0 && test $(LINK_TAR) -eq 1 && test $(LINK_LIB) -eq 1 && $(LN) -sf $(CUR_PATH)/$(TARGET_NAME) $(TARGET_LIB_PATH)/$(TARGET_NAME))
# $(shell test $(PROGRAM_TYPE) -ne 2 && test -n "$(TARGET_INC_PATH)" && test $(LINK_TAR) -eq 1 && test $(LINK_INC) -eq 1 && $(LN) -sf $(CUR_PATH)/ $(TARGET_INC_PATH)/)

