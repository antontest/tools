#/*************************************************************        
#FileName : makefile   
#FileFunc : Linux编译链接源程序,生成库
#Version  : V0.1        
#Author   : Antonio
#Date     : 2016-03-24   
#Descp    : Linux下makefile模板       
#*************************************************************/     
# target
TARGET_NAME = 
TARGET_PATH = .

# output dir
OUTDIR = build

# include
INCLUDE_PATH = . 

# source files
SRC_PATH  = .

# other c ,cpp and header files
C_FILE    = 
CPP_FILE  = 
HEAD_FILE = 

#install path 
ifeq ("$(INSTALL_ROOT_PATH)", "")
INSTALL_ROOT_PATH    = share
endif
ifeq ("$(INSTALL_INCLUDE_PATH)", "")
INSTALL_INCLUDE_PATH = include
endif
ifeq ("$(INSTALL_LIBRARY_PATH)", "")
INSTALL_LIBRARY_PATH = lib
endif

# Make command to use for dependencies
MAKE    = make
RM      = rm
MKDIR   = mkdir
CC      = gcc
XX      = g++
AR      = ar
LN      = ln
INSTALL = install

# Warning
OPTM     = -O2
OTHER    = -Wno-unused -Wno-format
WARNING  = -Wall -Werror
CFLAGS  += $(WARNING)

# source of .c and .o
CSRC   = $(wildcard $(addsuffix /*.c,$(SRC_PATH)))
CPPSRC = $(wildcard $(addsuffix /*.cpp,$(SRC_PATH)))
COBJ   = $(addprefix $(OUTDIR)/,$(subst .c,.o,$(CSRC) $(C_FILE)))
CPPOBJ = $(addprefix $(OUTDIR)/,$(subst .cpp,.o,$(CPPSRC) $(CPP_FILE)))
HSRC   = $(wildcard $(addsuffix /*.h,$(SRC_PATH)))
INSTALL_INC_HEADER   = $(addprefix $(INSTALL_ROOT_PATH)/$(INSTALL_INCLUDE_PATH)/,$(HSRC) $(HEAD_FILE))
UNINSTALL_INC_HEADER = $(addprefix $(INSTALL_ROOT_PATH)/$(INSTALL_INCLUDE_PATH)/,$(HSRC) $(HEAD_FILE))

# dependent files .d
CDEF   = $(patsubst %.c,${OUTDIR}/%.d,$(CSRC) $(C_FILE))
CPPDEF = $(patsubst %.cpp,${OUTDIR}/%.d,$(CPPSRC) $(CPP_FILE))

# deal with cpp
ifneq "$(CPPOBJ)" ""
CFLAGS += -lstdc++
endif

# complie
INC = $(addprefix -I ,$(INCLUDE_PATH))
COMPILE = $(CFLAGS) $(INC) -c $< -o $@ #$(OUTDIR)/$(*F).o

# compile library
LINK = $(AR) -rs $@ $(COBJ) $(CPPOBJ)

# make depend
MAKEDEPEND = gcc -MM -MT

# header and target LINK
CUR_DIR_PATH     = $(shell pwd)
CUR_DIR          = $(shell basename `pwd`)
TARGET_LIB_PATH  = $(call find_dir,"libs")
TARGET_INC_PATH  = $(call find_dir,"incs")
FINAL_LIB_TARGET = $(TARGET_LIB_PATH)/$(TARGET_NAME)
FINAL_INC_TARGET = $(TARGET_INC_PATH)/$(CUR_DIR)

# generate target name
# $1 Library name
# $2 0 -- for static, 1 -- for shared, 2 -- for execute
# $3 build for win, 0 -- for unix, 1 -- for windows
define gen_name 
	$(shell \
		win=1 ; \
		name=$(1) ; \
		test -z "$(3)" && test $(2) -eq 0 && win=0 && ext=a ; \
		test -z "$(3)" && test $(2) -eq 1 && win=0 && ext=so ; \
		test -z "$(3)" && test $(2) -eq 2 && win=0 && ext= ; \
		test -n "$(3)" && test $(2) -eq 0 && win=1 && ext=a ; \
		test -n "$(3)" && test $(2) -eq 1 && win=1 && ext=dll ; \
		test -n "$(3)" && test $(2) -eq 2 && win=1 && ext=exe ; \
		prefix_lib=`echo $(1) | grep "lib"` ; \
		test -z "$$prefix_lib" && test $$win -eq 0 && test $(2) -ne 2 && name="lib"$(1) ; \
		test -n "$$ext" && suffix_ext=`echo $(1) | grep ".$$ext"` ; \
		test -n "$$ext" && test -z "$$suffix_ext" && name=$$name"."$$ext ; \
		echo $$name ; \
	)
endef

# gen target name and target 
NAME         = $(call gen_name,$(TARGET_NAME),0,$(BUILD_FOR_WIN))
TARGET_NAME := $(strip $(NAME))
TARGET       = $(TARGET_PATH)/$(TARGET_NAME)

all:$(TARGET)
$(OUTDIR) :  
	-@$(call make_dir,$@)
$(CDEF) : 
	-@$(call make_dir,$(dir $@))
	$(MAKEDEPEND) $(subst .d,.o,$@) $(subst $(OUTDIR)/,,$(@:.d=.c)) > $@
$(CPPDEF) : 
	-@$(call make_dir,$(dir $@))
	$(MAKEDEPEND) $(subst .d,.o,$@) $(subst $(OUTDIR)/,,$(@:.d=.cpp)) > $@
depend :
	-rm -f $(CDEF)
	-rm -f $(CPPDEF)
	$(MAKE) $(CDEF)
	$(MAKE) $(CPPDEF)
$(COBJ) : 
	$(CC) $(COMPILE)
$(CPPOBJ) : 
	$(XX) $(COMPILE)
$(TARGET_PATH):
	-@$(call make_dir,$@)
$(TARGET) : $(OUTDIR) $(COBJ) $(CPPOBJ) $(TARGET_PATH) 
	$(LINK)
	-@$(LN) -sf $(CUR_DIR_PATH)/$(TARGET_NAME) $(TARGET_LIB_PATH)/$(TARGET_NAME)
	-@$(LN) -sf $(CUR_DIR_PATH)/ $(TARGET_INC_PATH)/
-include $(CDEF)
-include $(CPPDEF)

PHONY = rebuild clean cleanall install
.PHONY : $(PHONY)
# Rebuild this project
rebuild : clean all

# Clean this project
clean :
	-$(RM) -f $(COBJ) $(CPPOBJ)
	-$(RM) -f $(TARGET)
	-$(RM) -f $(FINAL_LIB_TARGET)
	-$(RM) -f $(FINAL_INC_TARGET)	

# Clean this project and all dependencies
cleanall : clean
	-$(RM) -f $(CDEF) $(CPPDEF)
	$(call remove_dir,$(OUTDIR))
	$(call remove_dir,$(TARGET_PATH))

# Install lib or share
$(INSTALL_INC_HEADER):
	-$(INSTALL) -p -D -m 0444 $(subst $(INSTALL_ROOT_PATH)/$(INSTALL_INCLUDE_PATH)/,,$@) $@
install: $(INSTALL_INC_HEADER) 
	-$(INSTALL) -p -D -m 0444 $(TARGET) $(INSTALL_ROOT_PATH)/$(INSTALL_LIBRARY_PATH)/$(TARGET)
uninstall:
	-$(RM) -f $(INSTALL_INC_HEADER) 
	-$(RM) -f $(INSTALL_ROOT_PATH)/$(INSTALL_LIBRARY_PATH)/$(TARGET)

# make directory
define make_dir
	$(shell \
		if [ -n "$(1)" -a "$(1)" != "." -a ! -d $(1) ] ; then \
			mkdir -p $(1); \
		fi \
	)
endef

# make directory
define remove_dir
	$(shell \
		if [ "$(1)" != "." ] ; then \
			rm -rf $(1); \
		fi \
	)
endef

# find dir by name
# @1 directory name
define find_dir
	$(shell \
		find_path=`pwd`; \
		while [ "$$find_path" != $$HOME ]; do \
    		r=`find $$find_path -maxdepth 1 -iname "$(1)"` ; \
    		test -n "$$r" && echo $$r && exit 0; \
    		find_path=`dirname $$find_path`; \
		done; \
	)
endef

