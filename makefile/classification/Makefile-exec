#/*************************************************************        
#FileName : makefile   
#FileFunc : Linux编译链接源程序,生成目标可执行代码      
#Version  : V0.1        
#Author   : Antonio
#Date     : 2016-03-24   
#Descp    : Linux下makefile模板       
#*************************************************************/     
# target
TARGET_NAME= 
TARGET_PATH= .
TARGET= ${TARGET_PATH}/${TARGET_NAME}

# temp file output dir
OUTDIR = build

# include
INCLUDE_PATH = . 

# path of source file 
SRC_PATH = . 

# search the lib which complied by myself
LIB_PATH = . 
LIB_NAME = 
# other librarys
OTH_LIB =

# install path 
USR_BIN_PATH = .

# make command to use for dependencies
MAKE = make
RM = rm
MKDIR = mkdir
CC = gcc
XX = g++

# source of .c and .o
CSRC = $(wildcard $(addsuffix /*.c,$(SRC_PATH)))
CPPSRC = $(wildcard $(addsuffix /*.cpp,$(SRC_PATH)))
COBJ = $(addprefix $(OUTDIR)/,$(subst .c,.o,$(CSRC)))
CPPOBJ = $(addprefix $(OUTDIR)/,$(subst .cpp,.o,$(CPPSRC)))

# deal with cpp
ifneq "$(CPPOBJ)" ""
CFLAGS += -lstdc++
endif

# dependent files .d
CDEF = $(patsubst %.c,${OUTDIR}/%.d,$(CSRC))
CPPDEF = $(patsubst %.cpp,${OUTDIR}/%.d,$(CPPSRC))

# warning
OPTM = -O2
ifneq ($(ver), release)
DEBUG = -g
endif
ERROR = -Werror
OTHER = -Wno-unused -Wno-format
WARNING = -Wall $(ERROR)
CFLAGS += $(WARNING) $(DEBUG)

# complie
INC = $(addprefix -I ,$(INCLUDE_PATH))
COMPILE = $(CFLAGS) $(INC) -c $< -o $@ #$(OUTDIR)/$(*F).o

# library of compling
LIB_PATH += .
LIBS_PATH = $(addprefix -L ,$(LIB_PATH))
# set lib
LIB = $(addprefix -l,$(LIB_NAME))
LIB := $(LIBS_PATH) $(LIB) $(OTH_LIB)
LINK = $(CC) $(CFLAGS) -o $@ $(COBJ) $(CPPOBJ) $(LIB) #$(OUTDIR)/*.o

# make depend
MAKEDEPEND = gcc -MM -MT

all:$(TARGET)
$(OUTDIR) :  
	-@$(call make_dir,$@)
$(CDEF) : 
	-@$(call make_dir,$(dir $@))
	$(MAKEDEPEND) $(subst .d,.o,$@) $(subst $(OUTDIR)/,,$(@:.d=.c)) > $@
$(CPPDEF) : 
	-@$(call make_dir,$(dir $@))
	$(MAKEDEPEND) $(subst .d,.o,$@) $(subst $(OUTDIR)/,,$(@:.d=.cpp)) > $@
depend : $(OUTDIR)
	-rm -f $(CDEF)
	-rm -f $(CPPDEF)
	$(MAKE) $(CDEF)
	$(MAKE) $(CPPDEF)
$(COBJ) :
	$(CC) $(COMPILE)
$(CPPOBJ) : 
	$(XX) $(COMPILE)
$(TARGET_PATH):
	-@$(call make_dir,$@)
$(TARGET) : $(OUTDIR) $(COBJ) $(CPPOBJ) $(TARGET_PATH)
	$(LINK)
-include $(CDEF)
-include $(CPPDEF)

PHONY = rebuild clean cleanall install
.PHONY : $(PHONY)
# Rebuild this project
rebuild : cleanall all

# Clean this project
clean :
	-$(RM) -f $(COBJ) $(CPPOBJ)
	-$(RM) -f $(TARGET)

# Clean this project and all dependencies
cleanall : clean
	-$(RM) -f $(CDEF) $(CPPDEF)
	$(call remove_dir,$(OUTDIR))
	$(call remove_dir,$(TARGET_PATH))

# Install lib or share
install:
	-install -s $(TARGET) -p -D $(USR_BIN_PATH)/$(TARGET)
uninstall:
	-$(RM) -f $(USR_BIN_PATH)/$(TARGET)

# make directory
define make_dir
	$(shell \
		if [ -n "$(1)" -a "$(1)" != "." -a ! -d $(1) ] ; then \
			mkdir -p $(1); \
		fi \
	)
endef

# make directory
define remove_dir
	$(shell \
		if [ "$(1)" != "." ] ; then \
			rm -rf $(1); \
		fi \
	)
endef

