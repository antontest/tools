#/*************************************************************        
#FileName : makefile   
#FileFunc : Linux编译链接源程序,生成目标可执行代码      
#Version  : V0.1        
#Author   : Antonio
#Date     : 2016-03-24   
#Descp    : Linux下makefile模板       
#*************************************************************/     
# target
TARGET_NAME= 
TARGET_PATH= .
TARGET= ${TARGET_PATH}/${TARGET_NAME}

# output dir
OUTDIR = build

# install path 
USR_BIN_PATH = .

# include
INCLUDE_PATH = .

# search the lib which complied by myself
LIB_PATH = . 
LIB_NAME = 
# other librarys
OTH_LIB =

# Make command to use for dependencies
MAKE = make
RM = rm
MKDIR = mkdir
CC = gcc
XX = g++

# source of .c and .o
SRC_PATH = .
CSRC = $(wildcard $(addsuffix /*.c,$(SRC_PATH)))
CPPSRC = $(wildcard $(addsuffix /*.cpp,$(SRC_PATH)))
COBJ = $(patsubst %.c,${OUTDIR}/%.o,$(notdir $(CSRC)))
CPPOBJ = $(patsubst %.cpp,${OUTDIR}/%.o,$(notdir $(CPPSRC)))

# deal with cpp
ifneq "$(CPPOBJ)" ""
CFLAGS += -lstdc++
endif

# dependent files .d
CDEF = $(patsubst %.c,${OUTDIR}/%.d,$(notdir $(CSRC)))
CPPDEF = $(patsubst %.cpp,${OUTDIR}/%.d,$(notdir $(CPPSRC)))

# Warning
OPTM = -O2
ifneq ($(ver), release)
DEBUG = -g
endif
ERROR = -Werror
OTHER = -Wno-unused -Wno-format
WARNING = -Wall $(ERROR)
CFLAGS += $(WARNING) $(DEBUG)

# complie
INC = $(addprefix -I ,$(INCLUDE_PATH))
COMPILE = $(CFLAGS) $(INC) -c $< -o $@ #$(OUTDIR)/$(*F).o

# Library of compling
LIB_PATH += .
LIBS_PATH = $(addprefix -L ,$(LIB_PATH))
# set lib
LIB = $(addprefix -l,$(LIB_NAME))
LIB := $(LIBS_PATH) $(LIB) $(OTH_LIB)
LINK = $(CC) $(CFLAGS) -o $@ $(COBJ) $(CPPOBJ) $(LIB) #$(OUTDIR)/*.o

# make depend
MAKEDEPEND = gcc -MM -MT

all:$(TARGET)
$(OUTDIR) :  
	-if test -n $(OUTDIR) ; then $(MKDIR) -p $(OUTDIR) ; fi
$(CDEF) : $(OUTDIR)/%.d : $(SRC_PATH)/%.c $(OUTDIR)
	$(MAKEDEPEND) $(<:.c=.o) $< > $@
$(CPPDEF) : $(OUTDIR)/%.d : ${SRC_PATH}/%.cpp
	$(MAKEDEPEND) $(<:.cpp=.o) $< > $@
depend : $(OUTDIR)
	-rm -f $(CDEF)
	-rm -f $(CPPDEF)
	$(MAKE) $(CDEF)
	$(MAKE) $(CPPDEF)
$(COBJ) : $(OUTDIR)/%.o : %.c
	$(CC) $(COMPILE)
$(CPPOBJ) : $(OUTDIR)/%.o : %.cpp
	$(XX) $(COMPILE)
$(TARGET_PATH):
	-if test -n $@ ; then $(MKDIR) -p $@ ; fi
$(TARGET) : $(OUTDIR) $(COBJ) $(CPPOBJ) $(TARGET_PATH)
	$(LINK)
# -include $(CDEF)
# -include $(CPPDEF)

PHONY = rebuild clean cleanall install
.PHONY : $(PHONY)
# Rebuild this project
rebuild : cleanall all
#
# Clean this project
clean :
	-$(RM) -f $(COBJ) $(CPPOBJ)
	-$(RM) -f $(TARGET)

# Clean this project and all dependencies
cleanall : clean
	-$(RM) -f $(CDEF) $(CPPDEF)

# Install lib or share
install:
	-install -s $(TARGET) -p -D $(USR_BIN_PATH)/$(TARGET)
uninstall:
	-$(RM) -f $(USR_BIN_PATH)/$(TARGET)
