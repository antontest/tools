!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CMD	sock.h	/^    CMD       $/;"	e	enum:sock_data_type
CMD	sock.h	/^    CMD       $/;"	e	enum:socket_data_type
DFT_STRING_SIZE	sock.h	100;"	d
DFT_STRING_SIZE	sock.h	28;"	d
DFT_STRING_SIZE	sock.h	29;"	d
DFT_STRING_SIZE	sock.h	99;"	d
DFT_STRING_SIZE	socket/socket_app.h	25;"	d
DFT_STRING_SIZE	socket/socket_app.h	30;"	d
DFT_STRING_SIZE	socket/socket_app.h	33;"	d
DFT_STRING_SIZE	socket/socket_app.h	35;"	d
DFT_STRING_SIZE	socket_app.h	25;"	d
ETHTOOL_GSET	socket/socket_property.h	36;"	d
ETHTOOL_GSET	socket/socket_property.h	37;"	d
ETHTOOL_GSET	socket_property.h	36;"	d
ETHTOOL_SSET	socket/socket_property.h	37;"	d
ETHTOOL_SSET	socket/socket_property.h	38;"	d
ETHTOOL_SSET	socket_property.h	37;"	d
F_BLK	dir.h	/^    F_BLK           ,$/;"	e	enum:file_type
F_CHR	dir.h	/^    F_CHR           ,$/;"	e	enum:file_type
F_DIR	dir.h	/^    F_DIR           ,$/;"	e	enum:file_type
F_FIFO	dir.h	/^    F_FIFO          ,$/;"	e	enum:file_type
F_LNK	dir.h	/^    F_LNK           ,$/;"	e	enum:file_type
F_REG	dir.h	/^    F_REG       = 0 ,$/;"	e	enum:file_type
F_SOCK	dir.h	/^    F_SOCK$/;"	e	enum:file_type
F_UNKNOWN	dir.h	/^    F_UNKNOWN   = -1, $/;"	e	enum:file_type
INT	sock.h	/^    INT    = 0,$/;"	e	enum:sock_data_type
INT	sock.h	/^    INT    = 0,$/;"	e	enum:socket_data_type
MACRO_STR	sock.h	32;"	d
MACRO_STR	sock.h	33;"	d
MACRO_STR	socket/socket_property.h	29;"	d
MACRO_STR	socket/socket_property.h	30;"	d
MACRO_STR	socket_base.h	28;"	d
MACRO_STR	socket_property.h	29;"	d
MAX_CLIENT_NUM	sock.h	20;"	d
MAX_CLIENT_NUM	sock.h	22;"	d
MAX_CLIENT_NUM	sock.h	23;"	d
MAX_CLIENT_NUM	sock.h	27;"	d
MAX_CLIENT_NUM	sock.h	28;"	d
MAX_CLIENT_NUM	socket/socket_app.h	24;"	d
MAX_CLIENT_NUM	socket/socket_app.h	29;"	d
MAX_CLIENT_NUM	socket/socket_app.h	32;"	d
MAX_CLIENT_NUM	socket/socket_app.h	34;"	d
MAX_CLIENT_NUM	socket_app.h	24;"	d
MOD_ID_TMR	socket_msg.h	/^    MOD_ID_TMR      = 1$/;"	e	enum:__anon4
MOD_ID_UNKNOW	socket_msg.h	/^    MOD_ID_UNKNOW   = 0,$/;"	e	enum:__anon4
MOD_MAX	socket_msg.h	15;"	d
MSG	socket_msg.h	66;"	d
MSG_DATA	socket_msg.h	70;"	d
MSG_LEN	socket_msg.h	69;"	d
MSG_MAX_LEN	socket_msg.h	16;"	d
MSG_MOD	socket_msg.h	67;"	d
MSG_MSGID	socket_msg.h	68;"	d
MSG_RST_FAILURE	socket_msg.h	/^    MSG_RST_FAILURE,$/;"	e	enum:msg_rst
MSG_RST_INVALID_CFG	socket_msg.h	/^    MSG_RST_INVALID_CFG,$/;"	e	enum:msg_rst
MSG_RST_INVALID_MOD_ID	socket_msg.h	/^    MSG_RST_INVALID_MOD_ID,$/;"	e	enum:msg_rst
MSG_RST_QUEUE_FULL	socket_msg.h	/^    MSG_RST_QUEUE_FULL$/;"	e	enum:msg_rst
MSG_RST_SOCKET_ERROR	socket_msg.h	/^    MSG_RST_SOCKET_ERROR,$/;"	e	enum:msg_rst
MSG_RST_SUCCESS	socket_msg.h	/^    MSG_RST_SUCCESS = 0,$/;"	e	enum:msg_rst
MSG_RST_THREAD_ERROR	socket_msg.h	/^    MSG_RST_THREAD_ERROR,$/;"	e	enum:msg_rst
MSG_SOCKET_DIR	socket_msg.h	17;"	d
MSG_SRC	socket_msg.h	71;"	d
SIOCETHTOOL	socket/socket_property.h	33;"	d
SIOCETHTOOL	socket/socket_property.h	34;"	d
SIOCETHTOOL	socket_property.h	33;"	d
SOCKET_DATA_HEADER_SIZE	sock.h	102;"	d
SOCKET_DATA_HEADER_SIZE	sock.h	30;"	d
SOCKET_DATA_HEADER_SIZE	sock.h	31;"	d
SOCKET_DATA_HEADER_SIZE	socket/socket_app.h	27;"	d
SOCKET_DATA_HEADER_SIZE	socket/socket_app.h	32;"	d
SOCKET_DATA_HEADER_SIZE	socket/socket_app.h	35;"	d
SOCKET_DATA_HEADER_SIZE	socket/socket_app.h	37;"	d
SOCKET_DATA_HEADER_SIZE	socket_app.h	27;"	d
SOCKET_DATA_SIZE	sock.h	101;"	d
SOCKET_DATA_SIZE	sock.h	29;"	d
SOCKET_DATA_SIZE	sock.h	30;"	d
SOCKET_DATA_SIZE	socket/socket_app.h	26;"	d
SOCKET_DATA_SIZE	socket/socket_app.h	31;"	d
SOCKET_DATA_SIZE	socket/socket_app.h	34;"	d
SOCKET_DATA_SIZE	socket/socket_app.h	36;"	d
SOCKET_DATA_SIZE	socket_app.h	26;"	d
SOCKET_ON_ACCEPT	sock.h	/^    SOCKET_ON_ACCEPT  = 1,$/;"	e	enum:event_type
SOCKET_ON_ACCEPT	socket/socket_event.h	/^    SOCKET_ON_ACCEPT  = 1,$/;"	e	enum:event_type
SOCKET_ON_ACCEPT	socket_event.h	/^    SOCKET_ON_ACCEPT  = 1,$/;"	e	enum:event_type
SOCKET_ON_CLOSE	sock.h	/^    SOCKET_ON_CLOSE   = 16$/;"	e	enum:event_type
SOCKET_ON_CLOSE	socket/socket_event.h	/^    SOCKET_ON_CLOSE   = 16$/;"	e	enum:event_type
SOCKET_ON_CLOSE	socket_event.h	/^    SOCKET_ON_CLOSE   = 16$/;"	e	enum:event_type
SOCKET_ON_CONNECT	sock.h	/^    SOCKET_ON_CONNECT = 2, $/;"	e	enum:event_type
SOCKET_ON_CONNECT	socket/socket_event.h	/^    SOCKET_ON_CONNECT = 2, $/;"	e	enum:event_type
SOCKET_ON_CONNECT	socket_event.h	/^    SOCKET_ON_CONNECT = 2, $/;"	e	enum:event_type
SOCKET_ON_RECV	sock.h	/^    SOCKET_ON_RECV    = 4,$/;"	e	enum:event_type
SOCKET_ON_RECV	socket/socket_event.h	/^    SOCKET_ON_RECV    = 4,$/;"	e	enum:event_type
SOCKET_ON_RECV	socket_event.h	/^    SOCKET_ON_RECV    = 4,$/;"	e	enum:event_type
SOCKET_ON_SEND	sock.h	/^    SOCKET_ON_SEND    = 8,$/;"	e	enum:event_type
SOCKET_ON_SEND	socket/socket_event.h	/^    SOCKET_ON_SEND    = 8,$/;"	e	enum:event_type
SOCKET_ON_SEND	socket_event.h	/^    SOCKET_ON_SEND    = 8,$/;"	e	enum:event_type
SOCK_DATA_HEADER_SIZE	sock.h	101;"	d
SOCK_DATA_SIZE	sock.h	100;"	d
SPEED_10	socket/socket_property.h	40;"	d
SPEED_10	socket/socket_property.h	41;"	d
SPEED_10	socket_property.h	40;"	d
SPEED_100	socket/socket_property.h	41;"	d
SPEED_100	socket/socket_property.h	42;"	d
SPEED_100	socket_property.h	41;"	d
SPEED_1000	socket/socket_property.h	42;"	d
SPEED_1000	socket/socket_property.h	43;"	d
SPEED_1000	socket_property.h	42;"	d
SPEED_10000	socket/socket_property.h	44;"	d
SPEED_10000	socket/socket_property.h	45;"	d
SPEED_10000	socket_property.h	44;"	d
SPEED_2500	socket/socket_property.h	43;"	d
SPEED_2500	socket/socket_property.h	44;"	d
SPEED_2500	socket_property.h	43;"	d
STRING	sock.h	/^    STRING    ,$/;"	e	enum:sock_data_type
STRING	sock.h	/^    STRING    ,$/;"	e	enum:socket_data_type
SYSTEM	proc.h	/^int SYSTEM(const char *format, ...);$/;"	p	signature:(const char *format, ...)
TIMER_ACCURACY	libsc_timer.h	21;"	d
TIMER_ACCURACY	timer.h	22;"	d
_BIG_ENDIAN_	socket/socket_header.h	9;"	d
_BIG_ENDIAN_	socket_header.h	9;"	d
_BYTE_ORDER_	socket/socket_header.h	13;"	d
_BYTE_ORDER_	socket_header.h	13;"	d
_DIR_H__	dir.h	2;"	d
_LITTLE_ENDIAN_	socket/socket_header.h	5;"	d
_LITTLE_ENDIAN_	socket_header.h	5;"	d
__CFG_H__	cfg.h	2;"	d
__LIBSC_TIMER_H__	libsc_timer.h	2;"	d
__LIBSC_TIMER_H__	timer.h	2;"	d
__PROC_H__	proc.h	2;"	d
__SOCKET_APP_H__	socket/socket_app.h	2;"	d
__SOCKET_APP_H__	socket_app.h	2;"	d
__SOCKET_BASE_H__	socket/socket_base.h	2;"	d
__SOCKET_BASE_H__	socket_base.h	2;"	d
__SOCKET_EVENT_H__	socket/socket_event.h	2;"	d
__SOCKET_EVENT_H__	socket_event.h	2;"	d
__SOCKET_HEADER_H__	socket/socket_app.h	17;"	d
__SOCKET_HEADER__	socket/socket_header.h	2;"	d
__SOCKET_HEADER__	socket_header.h	2;"	d
__SOCKET_MSG_H__	socket_msg.h	2;"	d
__SOCKET_PROPERTY_H__	socket/socket_property.h	2;"	d
__SOCKET_PROPERTY_H__	socket_property.h	2;"	d
__SOCK_H__	sock.h	2;"	d
__THREAD_H__	thread.h	2;"	d
a_trim	cfg.h	/^void a_trim(char *s);$/;"	p	signature:(char *s)
active	libsc_timer.h	/^    int active;$/;"	m	struct:libsc_timer_impl	access:public
active	sock.h	/^    int active;$/;"	m	struct:sock	access:public
active	thread.h	/^    int active;$/;"	m	struct:thread_impl	access:public
active	timer.h	/^    int active;$/;"	m	struct:timer_impl	access:public
add_socket_to_membership	sock.h	/^int add_socket_to_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
add_socket_to_membership	socket/socket_property.h	/^int add_socket_to_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
add_socket_to_membership	socket_base.h	/^int add_socket_to_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
add_socket_to_membership	socket_property.h	/^int add_socket_to_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
addr	sock.h	/^    struct sockaddr_in addr;$/;"	m	struct:sock	typeref:struct:sock::sockaddr_in	access:public
addr	sock.h	/^    struct sockaddr_in addr;$/;"	m	struct:socket	typeref:struct:socket::sockaddr_in	access:public
addr	socket/socket_app.h	/^        struct sockaddr addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr	access:public
addr	socket/socket_app.h	/^        struct sockaddr addr;$/;"	m	union:socket_impl::__anon3	typeref:struct:socket_impl::__anon3::sockaddr	access:public
addr	socket/socket_app.h	/^    } addr;$/;"	m	struct:socket_impl	typeref:union:socket_impl::__anon2	access:public
addr	socket/socket_app.h	/^    } addr;$/;"	m	struct:socket_impl	typeref:union:socket_impl::__anon3	access:public
addr	socket_app.h	/^    } addr;$/;"	m	struct:socket_impl	typeref:union:socket_impl::__anon2	access:public
advertising	socket/socket_property.h	/^    __u32   advertising;    \/* Features this interface advertises *\/  $/;"	m	struct:ethtool_cmd	access:public
advertising	socket_property.h	/^    __u32   advertising;    \/* Features this interface advertises *\/  $/;"	m	struct:ethtool_cmd	access:public
ah	socket/socket_header.h	/^        struct arp_hdr ah;$/;"	m	struct:frame_arp	typeref:struct:frame_arp::arp_hdr	access:public
ar_hln	socket/socket_header.h	/^    unsigned char ar_hln;		\/* Length of hardware address.  *\/$/;"	m	struct:arp_hdr	access:public
ar_hrd	socket/socket_header.h	/^    unsigned short int ar_hrd;		\/* Format of hardware address.  *\/$/;"	m	struct:arp_hdr	access:public
ar_op	socket/socket_header.h	/^    unsigned short int ar_op;		\/* ARP opcode (command).  *\/$/;"	m	struct:arp_hdr	access:public
ar_pln	socket/socket_header.h	/^    unsigned char ar_pln;		\/* Length of protocol address.  *\/$/;"	m	struct:arp_hdr	access:public
ar_pro	socket/socket_header.h	/^    unsigned short int ar_pro;		\/* Format of protocol address.  *\/$/;"	m	struct:arp_hdr	access:public
arg	sock.h	/^    void *arg;        $/;"	m	struct:callback	access:public
arg	sock.h	/^    void *arg;$/;"	m	struct:callback	access:public
arg	socket/socket_event.h	/^    void *arg;        $/;"	m	struct:call_back	access:public
arg	socket_event.h	/^    void *arg;        $/;"	m	struct:call_back	access:public
arg	thread.h	/^    void *arg;$/;"	m	struct:pthread_worker	access:public
arp_cheat	socket/socket_app.h	/^int arp_cheat(const char *ifname, const unsigned char *attack_ip, $/;"	p	signature:(const char *ifname, const unsigned char *attack_ip, const unsigned char *gateway_ip)
arp_hdr	socket/socket_header.h	/^struct arp_hdr$/;"	s
arp_hdr::ar_hln	socket/socket_header.h	/^    unsigned char ar_hln;		\/* Length of hardware address.  *\/$/;"	m	struct:arp_hdr	access:public
arp_hdr::ar_hrd	socket/socket_header.h	/^    unsigned short int ar_hrd;		\/* Format of hardware address.  *\/$/;"	m	struct:arp_hdr	access:public
arp_hdr::ar_op	socket/socket_header.h	/^    unsigned short int ar_op;		\/* ARP opcode (command).  *\/$/;"	m	struct:arp_hdr	access:public
arp_hdr::ar_pln	socket/socket_header.h	/^    unsigned char ar_pln;		\/* Length of protocol address.  *\/$/;"	m	struct:arp_hdr	access:public
arp_hdr::ar_pro	socket/socket_header.h	/^    unsigned short int ar_pro;		\/* Format of protocol address.  *\/$/;"	m	struct:arp_hdr	access:public
arr_size	macro.h	55;"	d
autoneg	socket/socket_property.h	/^    __u8    autoneg;        \/* Enable or disable autonegotiation *\/  $/;"	m	struct:ethtool_cmd	access:public
autoneg	socket_property.h	/^    __u8    autoneg;        \/* Enable or disable autonegotiation *\/  $/;"	m	struct:ethtool_cmd	access:public
basename	dir.h	/^char *basename(char *path, char *name, int size);$/;"	p	signature:(char *path, char *name, int size)
body	socket/socket_app.h	/^    char body[0];$/;"	m	struct:socket_impl	access:public
body	socket_app.h	/^    char body[0];$/;"	m	struct:socket_impl	access:public
body	socket_msg.h	/^     char body[0];$/;"	m	struct:msg	access:public
c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon1	access:public
c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon2	access:public
c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon3	access:public
c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon4	access:public
c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon6	access:public
c	timer.h	/^        char c;$/;"	m	union:timer::__anon2	access:public
c	timer.h	/^        char c;$/;"	m	union:timer::__anon3	access:public
c	timer.h	/^        char c;$/;"	m	union:timer::__anon5	access:public
call_back	socket/socket_event.h	/^typedef struct call_back$/;"	s
call_back	socket_event.h	/^typedef struct call_back$/;"	s
call_back::arg	socket/socket_event.h	/^    void *arg;        $/;"	m	struct:call_back	access:public
call_back::arg	socket_event.h	/^    void *arg;        $/;"	m	struct:call_back	access:public
call_back::evt_cb	socket/socket_event.h	/^    event_cb evt_cb;   $/;"	m	struct:call_back	access:public
call_back::evt_cb	socket_event.h	/^    event_cb evt_cb;   $/;"	m	struct:call_back	access:public
call_back_t	socket/socket_event.h	/^} call_back_t;$/;"	t	typeref:struct:call_back
call_back_t	socket_event.h	/^} call_back_t;$/;"	t	typeref:struct:call_back
callback	sock.h	/^typedef struct callback$/;"	s
callback	sock.h	/^} callback;$/;"	t	typeref:struct:callback
callback::arg	sock.h	/^    void *arg;        $/;"	m	struct:callback	access:public
callback::arg	sock.h	/^    void *arg;$/;"	m	struct:callback	access:public
callback::evt_cb	sock.h	/^    event_callback evt_cb;$/;"	m	struct:callback	access:public
callback::evt_cb	sock.h	/^    event_cb evt_cb;   $/;"	m	struct:callback	access:public
callback::evt_cb	sock.h	/^    event_cb evt_cb;$/;"	m	struct:callback	access:public
cb	libsc_timer.h	/^    timer_cb cb;$/;"	m	struct:libsc_timer_impl	access:public
cb	timer.h	/^    timer_cb cb;$/;"	m	struct:timer_impl	access:public
cfg_line_split	cfg.h	/^int cfg_line_split(char *line, const char *split, char **name, char **value);$/;"	p	signature:(char *line, const char *split, char **name, char **value)
cfg_value_gain	cfg.h	/^int cfg_value_gain(const char *key_name, const char *split, char value[], const char *path) ;$/;"	p	signature:(const char *key_name, const char *split, char value[], const char *path)
cfg_value_set	cfg.h	/^int cfg_value_set(const char *key_name, const char *split, const char *value, const char *path);$/;"	p	signature:(const char *key_name, const char *split, const char *value, const char *path)
check_proc_unique	proc.h	/^int check_proc_unique(const char *name);$/;"	p	signature:(const char *name)
cli_fd	sock.h	/^    int cli_fd[MAX_CLIENT_NUM];$/;"	m	struct:sock	access:public
cli_fd	sock.h	/^    int cli_fd[MAX_CLIENT_NUM];$/;"	m	struct:socket	access:public
cli_fd	socket/socket_app.h	/^    int cli_fd[MAX_CLIENT_NUM];$/;"	m	struct:socket_impl	access:public
cli_fd	socket_app.h	/^    int cli_fd[MAX_CLIENT_NUM];$/;"	m	struct:socket_impl	access:public
client_connect	sock.h	/^int client_connect(struct socket *sck, int domain, int type, \\$/;"	p	signature:(struct socket *sck, int domain, int type, \ const char *ip, u_short port)
client_connect	sock.h	/^int client_connect(struct socket *sck, int domain, int type, const char *ip, u_short port);$/;"	p	signature:(struct socket *sck, int domain, int type, const char *ip, u_short port)
client_time_connect	sock.h	/^int client_time_connect(struct socket *sck, int domain, int type, \\$/;"	p	signature:(struct socket *sck, int domain, int type, \ const char *ip, u_short port, int tm_ms)
client_time_connect	sock.h	/^int client_time_connect(struct socket *sck, int domain, int type, const char *ip, u_short port, int tm_ms);$/;"	p	signature:(struct socket *sck, int domain, int type, const char *ip, u_short port, int tm_ms)
cmd	socket/socket_property.h	/^    __u32   cmd;  $/;"	m	struct:ethtool_cmd	access:public
cmd	socket_property.h	/^    __u32   cmd;  $/;"	m	struct:ethtool_cmd	access:public
cmd_exec	proc.h	/^int cmd_exec(const char *cmd, int *pid);$/;"	p	signature:(const char *cmd, int *pid)
color	print.h	31;"	d
color_end	print.h	34;"	d
conn_flag	sock.h	/^    int conn_flag;$/;"	m	struct:sock	access:public
container_of	macro.h	45;"	d
curr_cli_fd	socket/socket_app.h	/^    int curr_cli_fd;$/;"	m	struct:socket_impl	access:public
data	sock.h	/^    sock_data_t data;$/;"	m	struct:sock	access:public
data	sock.h	/^    socket_data_t data;$/;"	m	struct:socket	access:public
data_type	sock.h	/^} data_type;$/;"	t	typeref:enum:sock_data_type
debug_error	macro.h	22;"	d
debug_error	print.h	11;"	d
debug_info	macro.h	32;"	d
debug_info	print.h	21;"	d
delete	libsc_timer.h	/^    int delete;$/;"	m	struct:libsc_timer_impl	access:public
delete	thread.h	/^    int delete;$/;"	m	struct:thread_impl	access:public
delete	timer.h	/^    int delete;$/;"	m	struct:timer_impl	access:public
destructor	socket_msg.h	/^    void (*destructor)(void *);$/;"	m	struct:msg	access:public
detect_permission	dir.h	/^int detect_permission(const char *path, const char *permission);$/;"	p	signature:(const char *path, const char *permission)
dirname	dir.h	/^char *dirname(char *path, char *name, int size);$/;"	p	signature:(char *path, char *name, int size)
done	thread.h	/^    int done;$/;"	m	struct:thread_impl	access:public
drop_socket_from_membership	sock.h	/^int drop_socket_from_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
drop_socket_from_membership	socket/socket_property.h	/^int drop_socket_from_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
drop_socket_from_membership	socket_base.h	/^int drop_socket_from_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
drop_socket_from_membership	socket_property.h	/^int drop_socket_from_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
dst_id	socket_msg.h	/^    mod_id_t        dst_id;$/;"	m	struct:msg	access:public
dst_ip	socket/socket_header.h	/^        unsigned char dst_ip[4];$/;"	m	struct:frame_arp	access:public
dst_mac	socket/socket_header.h	/^        unsigned char dst_mac[6];$/;"	m	struct:frame_arp	access:public
dst_mac	socket/socket_header.h	/^        unsigned char dst_mac[6];$/;"	m	struct:frame_hdr	access:public
dst_mac	socket/socket_header.h	/^    unsigned char dst_mac[6];$/;"	m	struct:ether_hdr	access:public
duplex	socket/socket_property.h	/^    __u8    duplex;         \/* Duplex, half or full *\/  $/;"	m	struct:ethtool_cmd	access:public
duplex	socket_property.h	/^    __u8    duplex;         \/* Duplex, half or full *\/  $/;"	m	struct:ethtool_cmd	access:public
endian	socket_msg.h	/^    unsigned char   endian;$/;"	m	struct:msg	access:public
ether_dhost	socket/socket_header.h	/^    unsigned char ether_dhost[6];$/;"	m	struct:ether_hdr	access:public
ether_dhost	socket_header.h	/^    unsigned char ether_dhost[6];$/;"	m	struct:ether_hdr	access:public
ether_hdr	socket/socket_header.h	/^struct ether_hdr {$/;"	s
ether_hdr	socket_header.h	/^struct ether_hdr {$/;"	s
ether_hdr::dst_mac	socket/socket_header.h	/^    unsigned char dst_mac[6];$/;"	m	struct:ether_hdr	access:public
ether_hdr::ether_dhost	socket/socket_header.h	/^    unsigned char ether_dhost[6];$/;"	m	struct:ether_hdr	access:public
ether_hdr::ether_dhost	socket_header.h	/^    unsigned char ether_dhost[6];$/;"	m	struct:ether_hdr	access:public
ether_hdr::ether_shost	socket/socket_header.h	/^    unsigned char ether_shost[6];$/;"	m	struct:ether_hdr	access:public
ether_hdr::ether_shost	socket_header.h	/^    unsigned char ether_shost[6];$/;"	m	struct:ether_hdr	access:public
ether_hdr::proto_type	socket/socket_header.h	/^    unsigned short proto_type;$/;"	m	struct:ether_hdr	access:public
ether_hdr::proto_type	socket_header.h	/^    unsigned short proto_type;$/;"	m	struct:ether_hdr	access:public
ether_hdr::src_mac	socket/socket_header.h	/^    unsigned char src_mac[6];$/;"	m	struct:ether_hdr	access:public
ether_shost	socket/socket_header.h	/^    unsigned char ether_shost[6];$/;"	m	struct:ether_hdr	access:public
ether_shost	socket_header.h	/^    unsigned char ether_shost[6];$/;"	m	struct:ether_hdr	access:public
ethtool_cmd	socket/socket_property.h	/^struct ethtool_cmd {  $/;"	s
ethtool_cmd	socket_property.h	/^struct ethtool_cmd {  $/;"	s
ethtool_cmd::advertising	socket/socket_property.h	/^    __u32   advertising;    \/* Features this interface advertises *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::advertising	socket_property.h	/^    __u32   advertising;    \/* Features this interface advertises *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::autoneg	socket/socket_property.h	/^    __u8    autoneg;        \/* Enable or disable autonegotiation *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::autoneg	socket_property.h	/^    __u8    autoneg;        \/* Enable or disable autonegotiation *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::cmd	socket/socket_property.h	/^    __u32   cmd;  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::cmd	socket_property.h	/^    __u32   cmd;  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::duplex	socket/socket_property.h	/^    __u8    duplex;         \/* Duplex, half or full *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::duplex	socket_property.h	/^    __u8    duplex;         \/* Duplex, half or full *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::maxrxpkt	socket/socket_property.h	/^    __u32   maxrxpkt;       \/* Rx pkts before generating rx int *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::maxrxpkt	socket_property.h	/^    __u32   maxrxpkt;       \/* Rx pkts before generating rx int *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::maxtxpkt	socket/socket_property.h	/^    __u32   maxtxpkt;       \/* Tx pkts before generating tx int *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::maxtxpkt	socket_property.h	/^    __u32   maxtxpkt;       \/* Tx pkts before generating tx int *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::phy_address	socket/socket_property.h	/^    __u8    phy_address;  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::phy_address	socket_property.h	/^    __u8    phy_address;  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::port	socket/socket_property.h	/^    __u8    port;           \/* Which connector port *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::port	socket_property.h	/^    __u8    port;           \/* Which connector port *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::reserved	socket/socket_property.h	/^    __u32   reserved[4];  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::reserved	socket_property.h	/^    __u32   reserved[4];  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::speed	socket/socket_property.h	/^    __u16   speed;          \/* The forced speed, 10Mb, 100Mb, gigabit *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::speed	socket_property.h	/^    __u16   speed;          \/* The forced speed, 10Mb, 100Mb, gigabit *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::supported	socket/socket_property.h	/^    __u32   supported;      \/* Features this interface supports *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::supported	socket_property.h	/^    __u32   supported;      \/* Features this interface supports *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::transceiver	socket/socket_property.h	/^    __u8    transceiver;    \/* Which transceiver to use *\/  $/;"	m	struct:ethtool_cmd	access:public
ethtool_cmd::transceiver	socket_property.h	/^    __u8    transceiver;    \/* Which transceiver to use *\/  $/;"	m	struct:ethtool_cmd	access:public
event_callback	sock.h	/^typedef void (*event_callback)(int fd, void *arg);$/;"	t
event_cb	sock.h	/^typedef void (*event_cb)(int fd, void *arg);$/;"	t
event_cb	socket/socket_event.h	/^typedef void (*event_cb)(int fd, void *arg);$/;"	t
event_cb	socket_event.h	/^typedef void (*event_cb)(int fd, void *arg);$/;"	t
event_loop	sock.h	/^typedef struct event_loop$/;"	s
event_loop	socket/socket_event.h	/^typedef struct event_loop$/;"	s
event_loop	socket_event.h	/^typedef struct event_loop$/;"	s
event_loop::evt	sock.h	/^    event_type_t evt;$/;"	m	struct:event_loop	access:public
event_loop::on_accept	sock.h	/^    callback on_accept;$/;"	m	struct:event_loop	access:public
event_loop::on_accept	socket/socket_event.h	/^    struct call_back on_accept;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop::on_accept	socket_event.h	/^    struct call_back on_accept;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop::on_close	sock.h	/^    callback on_close;$/;"	m	struct:event_loop	access:public
event_loop::on_close	socket/socket_event.h	/^    struct call_back on_close;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop::on_close	socket_event.h	/^    struct call_back on_close;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop::on_connect	sock.h	/^    callback on_connect;$/;"	m	struct:event_loop	access:public
event_loop::on_connect	socket/socket_event.h	/^    struct call_back on_connect;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop::on_connect	socket_event.h	/^    struct call_back on_connect;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop::on_recv	sock.h	/^    callback on_recv;$/;"	m	struct:event_loop	access:public
event_loop::on_recv	socket/socket_event.h	/^    struct call_back on_recv;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop::on_recv	socket_event.h	/^    struct call_back on_recv;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop::on_send	sock.h	/^    callback on_send;$/;"	m	struct:event_loop	access:public
event_loop::on_send	socket/socket_event.h	/^    struct call_back on_send;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop::on_send	socket_event.h	/^    struct call_back on_send;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
event_loop_t	sock.h	/^} event_loop_t;$/;"	t	typeref:struct:event_loop
event_loop_t	socket/socket_event.h	/^} event_loop_t;$/;"	t	typeref:struct:event_loop
event_loop_t	socket_event.h	/^} event_loop_t;$/;"	t	typeref:struct:event_loop
event_type	sock.h	/^typedef enum event_type $/;"	g
event_type	socket/socket_event.h	/^typedef enum event_type $/;"	g
event_type	socket_event.h	/^typedef enum event_type $/;"	g
event_type_t	sock.h	/^} event_type_t;$/;"	t	typeref:enum:event_type
event_type_t	socket/socket_event.h	/^} event_type_t;$/;"	t	typeref:enum:event_type
event_type_t	socket_event.h	/^} event_type_t;$/;"	t	typeref:enum:event_type
evl	sock.h	/^    event_loop_t evl;$/;"	m	struct:sock	access:public
evl	sock.h	/^    event_loop_t evl;$/;"	m	struct:socket	access:public
evl	socket/socket_app.h	/^    event_loop_t evl;$/;"	m	struct:socket_impl	access:public
evl	socket_app.h	/^    event_loop_t evl;$/;"	m	struct:socket_impl	access:public
evt	sock.h	/^    event_type_t evt;$/;"	m	struct:event_loop	access:public
evt_cb	sock.h	/^    event_callback evt_cb;$/;"	m	struct:callback	access:public
evt_cb	sock.h	/^    event_cb evt_cb;   $/;"	m	struct:callback	access:public
evt_cb	sock.h	/^    event_cb evt_cb;$/;"	m	struct:callback	access:public
evt_cb	socket/socket_event.h	/^    event_cb evt_cb;   $/;"	m	struct:call_back	access:public
evt_cb	socket_event.h	/^    event_cb evt_cb;   $/;"	m	struct:call_back	access:public
fd	sock.h	/^    int fd;$/;"	m	struct:sock	access:public
fd	sock.h	/^    int fd;$/;"	m	struct:socket	access:public
fd	socket/socket_app.h	/^    int fd;$/;"	m	struct:socket_impl	access:public
fd	socket_app.h	/^    int fd;$/;"	m	struct:socket_impl	access:public
fh	socket/socket_header.h	/^        struct frame_hdr fh;$/;"	m	struct:frame_arp	typeref:struct:frame_arp::frame_hdr	access:public
file_is_exist	dir.h	/^int file_is_exist(const char *pathname);$/;"	p	signature:(const char *pathname)
file_type	dir.h	/^typedef enum file_type {$/;"	g
file_type	dir.h	/^} file_type;$/;"	t	typeref:enum:file_type
flag	socket_msg.h	/^    int                 flag;$/;"	m	struct:shm_entry	access:public
frame_arp	socket/socket_header.h	/^struct frame_arp {$/;"	s
frame_arp::ah	socket/socket_header.h	/^        struct arp_hdr ah;$/;"	m	struct:frame_arp	typeref:struct:frame_arp::arp_hdr	access:public
frame_arp::dst_ip	socket/socket_header.h	/^        unsigned char dst_ip[4];$/;"	m	struct:frame_arp	access:public
frame_arp::dst_mac	socket/socket_header.h	/^        unsigned char dst_mac[6];$/;"	m	struct:frame_arp	access:public
frame_arp::fh	socket/socket_header.h	/^        struct frame_hdr fh;$/;"	m	struct:frame_arp	typeref:struct:frame_arp::frame_hdr	access:public
frame_arp::src_ip	socket/socket_header.h	/^        unsigned char src_ip[4];$/;"	m	struct:frame_arp	access:public
frame_arp::src_mac	socket/socket_header.h	/^        unsigned char src_mac[6];$/;"	m	struct:frame_arp	access:public
frame_hdr	socket/socket_header.h	/^struct frame_hdr {$/;"	s
frame_hdr::dst_mac	socket/socket_header.h	/^        unsigned char dst_mac[6];$/;"	m	struct:frame_hdr	access:public
frame_hdr::proto_type	socket/socket_header.h	/^        unsigned short proto_type;$/;"	m	struct:frame_hdr	access:public
frame_hdr::src_mac	socket/socket_header.h	/^        unsigned char src_mac[6];$/;"	m	struct:frame_hdr	access:public
free_ptr	socket_msg.h	/^    void            *free_ptr;$/;"	m	struct:msg	access:public
func_name	macro.h	14;"	d
get_can_read_bytes	sock.h	/^int get_can_read_bytes(int fd);$/;"	p	signature:(int fd)
get_can_read_bytes	socket/socket_property.h	/^int get_can_read_bytes(int fd);$/;"	p	signature:(int fd)
get_can_read_bytes	socket_base.h	/^int get_can_read_bytes(int fd);$/;"	p	signature:(int fd)
get_can_read_bytes	socket_property.h	/^int get_can_read_bytes(int fd);$/;"	p	signature:(int fd)
get_cmdline	proc.h	/^int get_cmdline(int pid, char *cmdline, int size);$/;"	p	signature:(int pid, char *cmdline, int size)
get_dir_size	dir.h	/^int get_dir_size(const char *pathname);$/;"	p	signature:(const char *pathname)
get_eth_speed	socket/socket_property.h	/^int get_eth_speed(const char *ifname);$/;"	p	signature:(const char *ifname)
get_eth_speed	socket_property.h	/^int get_eth_speed(const char *ifname);$/;"	p	signature:(const char *ifname)
get_exe_path_by_pid	proc.h	/^int get_exe_path_by_pid(pid_t pid, char *path, int size);$/;"	p	signature:(pid_t pid, char *path, int size)
get_file_path	proc.h	/^int get_file_path(int fd, int pid, char *path, int size);$/;"	p	signature:(int fd, int pid, char *path, int size)
get_file_size	dir.h	/^int get_file_size(const char *pathname);$/;"	p	signature:(const char *pathname)
get_file_type	dir.h	/^file_type get_file_type(const char *pathname);$/;"	p	signature:(const char *pathname)
get_gateway	socket/socket_property.h	/^int get_gateway(char *gateway, char *ifname);$/;"	p	signature:(char *gateway, char *ifname)
get_id_by_name	proc.h	/^int get_id_by_name(const char *name);$/;"	p	signature:(const char *name)
get_ifname	socket/socket_property.h	/^int get_ifname(char *ifname);$/;"	p	signature:(char *ifname)
get_ifname	socket_base.h	/^int get_ifname(char *ifname);$/;"	p	signature:(char *ifname)
get_ifname	socket_property.h	/^int get_ifname(char *ifname);$/;"	p	signature:(char *ifname)
get_interface_index	socket/socket_property.h	/^int get_interface_index(int fd, struct ifreq *req);$/;"	p	signature:(int fd, struct ifreq *req)
get_interface_index	socket_base.h	/^int get_interface_index(int fd, struct ifreq *req);$/;"	p	signature:(int fd, struct ifreq *req)
get_interface_index	socket_property.h	/^int get_interface_index(int fd, struct ifreq *req);$/;"	p	signature:(int fd, struct ifreq *req)
get_ip	socket/socket_property.h	/^int get_ip(char ip[]);$/;"	p	signature:(char ip[])
get_ip	socket_base.h	/^int get_ip(char ip[]);$/;"	p	signature:(char ip[])
get_ip	socket_property.h	/^int get_ip(char ip[]);$/;"	p	signature:(char ip[])
get_ip_by_ifname	socket/socket_property.h	/^int get_ip_by_ifname(const char *ifname, char *ip);$/;"	p	signature:(const char *ifname, char *ip)
get_ip_by_ifname	socket_base.h	/^int get_ip_by_ifname(const char *ifname, char *ip);$/;"	p	signature:(const char *ifname, char *ip)
get_ip_by_ifname	socket_property.h	/^int get_ip_by_ifname(const char *ifname, char *ip);$/;"	p	signature:(const char *ifname, char *ip)
get_local_ip	sock.h	/^int get_local_ip(char ip[]);$/;"	p	signature:(char ip[])
get_mac_addr	socket/socket_property.h	/^int get_mac_addr(const char *ifname, char *mac);$/;"	p	signature:(const char *ifname, char *mac)
get_mac_addr	socket/socket_property.h	/^int get_mac_addr(const char *ifname, unsigned char *mac);$/;"	p	signature:(const char *ifname, unsigned char *mac)
get_mac_addr	socket_property.h	/^int get_mac_addr(const char *ifname, char *mac);$/;"	p	signature:(const char *ifname, char *mac)
get_name_by_pid	proc.h	/^int get_name_by_pid(pid_t pid, char *name, int size);$/;"	p	signature:(pid_t pid, char *name, int size)
get_pid_by_name	proc.h	/^int get_pid_by_name(const char *proc_name);$/;"	p	signature:(const char *proc_name)
get_ppid	proc.h	/^int get_ppid(pid_t pid);$/;"	p	signature:(pid_t pid)
get_proc_name_by_pid	proc.h	/^int get_proc_name_by_pid(pid_t pid, char *proc_name, int size);$/;"	p	signature:(pid_t pid, char *proc_name, int size)
get_shell_result	proc.h	/^int get_shell_result(const char *cmd, char *result, int size);$/;"	p	signature:(const char *cmd, char *result, int size)
get_shell_return	proc.h	/^int get_shell_return(const char *cmd, char *result, int size);$/;"	p	signature:(const char *cmd, char *result, int size)
get_socket_error	socket/socket_property.h	/^int get_socket_error(int fd);$/;"	p	signature:(int fd)
get_socket_protocol	socket/socket_property.h	/^int get_socket_protocol(int fd);$/;"	p	signature:(int fd)
get_socket_protocol	socket_property.h	/^int get_socket_protocol(int fd);$/;"	p	signature:(int fd)
get_socket_recv_buf	sock.h	/^int get_socket_recv_buf(int fd);$/;"	p	signature:(int fd)
get_socket_recv_buf	socket/socket_property.h	/^int get_socket_recv_buf(int fd);$/;"	p	signature:(int fd)
get_socket_recv_buf	socket_base.h	/^int get_socket_recv_buf(int fd);$/;"	p	signature:(int fd)
get_socket_recv_buf	socket_property.h	/^int get_socket_recv_buf(int fd);$/;"	p	signature:(int fd)
get_socket_recv_timeout	sock.h	/^int get_socket_recv_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_recv_timeout	socket/socket_property.h	/^int get_socket_recv_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_recv_timeout	socket_base.h	/^int get_socket_recv_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_recv_timeout	socket_property.h	/^int get_socket_recv_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_send_buf	sock.h	/^int get_socket_send_buf(int fd);$/;"	p	signature:(int fd)
get_socket_send_buf	socket/socket_property.h	/^int get_socket_send_buf(int fd);$/;"	p	signature:(int fd)
get_socket_send_buf	socket_base.h	/^int get_socket_send_buf(int fd);$/;"	p	signature:(int fd)
get_socket_send_buf	socket_property.h	/^int get_socket_send_buf(int fd);$/;"	p	signature:(int fd)
get_socket_send_timeout	sock.h	/^int get_socket_send_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_send_timeout	socket/socket_property.h	/^int get_socket_send_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_send_timeout	socket_base.h	/^int get_socket_send_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_send_timeout	socket_property.h	/^int get_socket_send_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_type	sock.h	/^int get_socket_type(int fd);$/;"	p	signature:(int fd)
get_socket_type	socket/socket_property.h	/^int get_socket_type(int fd);$/;"	p	signature:(int fd)
get_socket_type	socket_base.h	/^int get_socket_type(int fd);$/;"	p	signature:(int fd)
get_socket_type	socket_property.h	/^int get_socket_type(int fd);$/;"	p	signature:(int fd)
get_socket_type_str	sock.h	/^char* get_socket_type_str(int fd);$/;"	p	signature:(int fd)
get_socket_type_str	socket/socket_property.h	/^char* get_socket_type_str(int fd);$/;"	p	signature:(int fd)
get_socket_type_str	socket_base.h	/^char* get_socket_type_str(int fd);$/;"	p	signature:(int fd)
get_socket_type_str	socket_property.h	/^char* get_socket_type_str(int fd);$/;"	p	signature:(int fd)
get_subnet_addr	socket/socket_property.h	/^char * get_subnet_addr(const char *ip, const char *mask);$/;"	p	signature:(const char *ip, const char *mask)
get_subnet_addr	socket_base.h	/^char * get_subnet_addr(const char *ip, const char *mask);$/;"	p	signature:(const char *ip, const char *mask)
get_subnet_addr	socket_property.h	/^char * get_subnet_addr(const char *ip, const char *mask);$/;"	p	signature:(const char *ip, const char *mask)
handler	socket_msg.h	/^    msg_handler_t   handler;        \/* message handler *\/$/;"	m	struct:msg_mod_cfg	access:public
handler	socket_msg.h	/^    msg_handler_t   handler;$/;"	m	struct:local_msg_entry	access:public
handling_msg	socket_msg.h	/^    struct msg      *handling_msg;$/;"	m	struct:local_msg_entry	typeref:struct:local_msg_entry::msg	access:public
hold_cnt	socket_msg.h	/^    unsigned int    hold_cnt;$/;"	m	struct:msg	access:public
i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon1	access:public
i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon2	access:public
i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon3	access:public
i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon4	access:public
i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon6	access:public
i	sock.h	/^        int i;$/;"	m	union:sock::__anon1	access:public
i	sock.h	/^        int i;$/;"	m	union:sock_data::__anon1	access:public
i	sock.h	/^        int i;$/;"	m	union:socket_data::__anon1	access:public
i	timer.h	/^        int i;$/;"	m	union:timer::__anon2	access:public
i	timer.h	/^        int i;$/;"	m	union:timer::__anon3	access:public
i	timer.h	/^        int i;$/;"	m	union:timer::__anon5	access:public
i_cksum	socket/socket_header.h	/^    unsigned short i_cksum;$/;"	m	struct:icmp_hdr	access:public
i_cksum	socket_header.h	/^    unsigned short i_cksum;$/;"	m	struct:icmp_hdr	access:public
i_code	socket/socket_header.h	/^    unsigned char i_code;$/;"	m	struct:icmp_hdr	access:public
i_code	socket_header.h	/^    unsigned char i_code;$/;"	m	struct:icmp_hdr	access:public
i_id	socket/socket_header.h	/^    unsigned char i_id;$/;"	m	struct:ping_hdr	access:public
i_id	socket_header.h	/^    unsigned char i_id;$/;"	m	struct:ping_hdr	access:public
i_seq	socket/socket_header.h	/^    unsigned char i_seq;$/;"	m	struct:ping_hdr	access:public
i_seq	socket_header.h	/^    unsigned char i_seq;$/;"	m	struct:ping_hdr	access:public
i_type	socket/socket_header.h	/^    unsigned char i_type;$/;"	m	struct:icmp_hdr	access:public
i_type	socket_header.h	/^    unsigned char i_type;$/;"	m	struct:icmp_hdr	access:public
icmp_hdr	socket/socket_header.h	/^struct icmp_hdr {$/;"	s
icmp_hdr	socket_header.h	/^struct icmp_hdr {$/;"	s
icmp_hdr::i_cksum	socket/socket_header.h	/^    unsigned short i_cksum;$/;"	m	struct:icmp_hdr	access:public
icmp_hdr::i_cksum	socket_header.h	/^    unsigned short i_cksum;$/;"	m	struct:icmp_hdr	access:public
icmp_hdr::i_code	socket/socket_header.h	/^    unsigned char i_code;$/;"	m	struct:icmp_hdr	access:public
icmp_hdr::i_code	socket_header.h	/^    unsigned char i_code;$/;"	m	struct:icmp_hdr	access:public
icmp_hdr::i_type	socket/socket_header.h	/^    unsigned char i_type;$/;"	m	struct:icmp_hdr	access:public
icmp_hdr::i_type	socket_header.h	/^    unsigned char i_type;$/;"	m	struct:icmp_hdr	access:public
ident	socket_msg.h	/^    msg_ident       ident;$/;"	m	struct:local_msg_entry	access:public
impl	libsc_timer.h	/^    struct libsc_timer_impl *impl;$/;"	m	struct:libsc_timer	typeref:struct:libsc_timer::libsc_timer_impl	access:public
impl	timer.h	/^    struct timer_impl *impl;$/;"	m	struct:timer	typeref:struct:timer::timer_impl	access:public
in_addr	socket/socket_app.h	/^        struct sockaddr_in in_addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr_in	access:public
in_addr	socket/socket_app.h	/^        struct sockaddr_in in_addr;$/;"	m	union:socket_impl::__anon3	typeref:struct:socket_impl::__anon3::sockaddr_in	access:public
in_addr	socket_app.h	/^        struct sockaddr_in in_addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr_in	access:public
in_addr	socket_msg.h	/^    struct sockaddr_in  in_addr;$/;"	m	struct:shm_entry	typeref:struct:shm_entry::sockaddr_in	access:public
inet_addr_init	socket/socket_base.h	/^void inet_addr_init(struct sockaddr_in *addr, const char *ip, u_short port);$/;"	p	signature:(struct sockaddr_in *addr, const char *ip, u_short port)
inet_addr_init	socket_base.h	/^void inet_addr_init(struct sockaddr_in *addr, const char *ip, u_short port);$/;"	p	signature:(struct sockaddr_in *addr, const char *ip, u_short port)
inet_client_connect	socket/socket_app.h	/^int inet_client_connect(struct socket_impl *sck, int type, \\$/;"	p	signature:(struct socket_impl *sck, int type, \ const char *ip, u_short port)
inet_client_connect	socket_app.h	/^int inet_client_connect(struct socket_impl *sck, int type, \\$/;"	p	signature:(struct socket_impl *sck, int type, \ const char *ip, u_short port)
inet_client_time_connect	socket/socket_app.h	/^int inet_client_time_connect(struct socket_impl *sck, int type, \\$/;"	p	signature:(struct socket_impl *sck, int type, \ const char *ip, u_short port, int tm_ms)
inet_client_time_connect	socket_app.h	/^int inet_client_time_connect(struct socket_impl *sck, int type, \\$/;"	p	signature:(struct socket_impl *sck, int type, \ const char *ip, u_short port, int tm_ms)
inet_server_create	socket/socket_app.h	/^int inet_server_create(struct socket_impl *sck, int type, \\$/;"	p	signature:(struct socket_impl *sck, int type, \ const char *ip, u_short port)
inet_server_create	socket_app.h	/^int inet_server_create(struct socket_impl *sck, int type, \\$/;"	p	signature:(struct socket_impl *sck, int type, \ const char *ip, u_short port)
inet_socket_startup	socket_base.h	/^int inet_socket_startup(int domain, int type, struct sockaddr_in *addr, \\$/;"	p	signature:(int domain, int type, struct sockaddr_in *addr, \ const char *ip, u_short port, int is_ser)
ini_value_gain	cfg.h	/^int ini_value_gain(const char *app_name, const char *key_name, char value[], const char *path);$/;"	p	signature:(const char *app_name, const char *key_name, char value[], const char *path)
ini_value_set	cfg.h	/^int ini_value_set(const char *app_name, const char *key_name, const char *value, const char *path);$/;"	p	signature:(const char *app_name, const char *key_name, const char *value, const char *path)
ipc_fd	socket_msg.h	/^    int         ipc_fd;$/;"	m	struct:msg_ctl	access:public
ipc_stop	socket_msg.h	/^    int         ipc_stop;$/;"	m	struct:msg_ctl	access:public
ipc_thread	socket_msg.h	/^    pthread_t   ipc_thread;$/;"	m	struct:msg_ctl	access:public
is_big_endian	sock.h	/^int is_big_endian();$/;"	p
is_big_endian	socket/socket_property.h	/^int is_big_endian();$/;"	p
is_big_endian	socket_base.h	/^int is_big_endian();$/;"	p
is_big_endian	socket_property.h	/^int is_big_endian();$/;"	p
is_proc_unique	proc.h	/^int is_proc_unique(const char *proc_name);$/;"	p	signature:(const char *proc_name)
keep	thread.h	/^    int keep;$/;"	m	struct:thread_impl	access:public
l_trim	cfg.h	/^void l_trim(char *s);$/;"	p	signature:(char *s)
len	socket_msg.h	/^    unsigned int    len;            \/* message body length *\/$/;"	m	struct:msg	access:public
libsc_timer	libsc_timer.h	/^struct libsc_timer {$/;"	s
libsc_timer::__anon1::c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon1	access:public
libsc_timer::__anon1::i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon1	access:public
libsc_timer::__anon1::p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon1	access:public
libsc_timer::__anon2::c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon2	access:public
libsc_timer::__anon2::i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon2	access:public
libsc_timer::__anon2::p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon2	access:public
libsc_timer::__anon3::c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon3	access:public
libsc_timer::__anon3::i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon3	access:public
libsc_timer::__anon3::p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon3	access:public
libsc_timer::__anon4::c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon4	access:public
libsc_timer::__anon4::i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon4	access:public
libsc_timer::__anon4::p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon4	access:public
libsc_timer::__anon6::c	libsc_timer.h	/^        char c;$/;"	m	union:libsc_timer::__anon6	access:public
libsc_timer::__anon6::i	libsc_timer.h	/^        int i;$/;"	m	union:libsc_timer::__anon6	access:public
libsc_timer::__anon6::p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon6	access:public
libsc_timer::impl	libsc_timer.h	/^    struct libsc_timer_impl *impl;$/;"	m	struct:libsc_timer	typeref:struct:libsc_timer::libsc_timer_impl	access:public
libsc_timer_create	libsc_timer.h	/^struct libsc_timer * libsc_timer_create(int tm_ms, timer_cb cb, bool repeat);$/;"	p	signature:(int tm_ms, timer_cb cb, bool repeat)
libsc_timer_delete	libsc_timer.h	/^void libsc_timer_delete(struct libsc_timer *timer);$/;"	p	signature:(struct libsc_timer *timer)
libsc_timer_impl	libsc_timer.h	/^struct libsc_timer_impl {$/;"	s
libsc_timer_impl::active	libsc_timer.h	/^    int active;$/;"	m	struct:libsc_timer_impl	access:public
libsc_timer_impl::cb	libsc_timer.h	/^    timer_cb cb;$/;"	m	struct:libsc_timer_impl	access:public
libsc_timer_impl::delete	libsc_timer.h	/^    int delete;$/;"	m	struct:libsc_timer_impl	access:public
libsc_timer_impl::repeat	libsc_timer.h	/^    int repeat;$/;"	m	struct:libsc_timer_impl	access:public
libsc_timer_impl::thread	libsc_timer.h	/^    pthread_t thread;$/;"	m	struct:libsc_timer_impl	access:public
libsc_timer_impl::time_b	libsc_timer.h	/^    int time_b;$/;"	m	struct:libsc_timer_impl	access:public
libsc_timer_impl::time_r	libsc_timer.h	/^    int time_r;$/;"	m	struct:libsc_timer_impl	access:public
libsc_timer_reset	libsc_timer.h	/^void libsc_timer_reset(struct libsc_timer *timer);$/;"	p	signature:(struct libsc_timer *timer)
libsc_timer_start	libsc_timer.h	/^void libsc_timer_start(struct libsc_timer *timer);$/;"	p	signature:(struct libsc_timer *timer)
libsc_timer_stop	libsc_timer.h	/^void libsc_timer_stop(struct libsc_timer *timer);$/;"	p	signature:(struct libsc_timer *timer)
line_num	macro.h	18;"	d
linkstatd	socket/socket_app.h	/^int linkstatd(void (*link_up)(const char *ifname), void (*link_down)(const char *ifname));$/;"	p	signature:(void (*link_up)(const char *ifname), void (*link_down)(const char *ifname))
loc_ctl	socket_msg.h	/^    struct loc_ctl {$/;"	s	struct:msg_ctl	access:public
local_addr_init	socket/socket_base.h	/^void local_addr_init(struct sockaddr_un *addr, const char *path);$/;"	p	signature:(struct sockaddr_un *addr, const char *path)
local_addr_init	socket_base.h	/^void local_addr_init(struct sockaddr_un *addr, const char *path);$/;"	p	signature:(struct sockaddr_un *addr, const char *path)
local_client_connect	socket/socket_app.h	/^int local_client_connect(struct socket_impl *sck, int type, const char *path);$/;"	p	signature:(struct socket_impl *sck, int type, const char *path)
local_client_connect	socket_app.h	/^int local_client_connect(struct socket_impl *sck, int type, const char *path);$/;"	p	signature:(struct socket_impl *sck, int type, const char *path)
local_client_time_connect	socket/socket_app.h	/^int local_client_time_connect(struct socket_impl *sck, int type, const char *path, int tm_ms);$/;"	p	signature:(struct socket_impl *sck, int type, const char *path, int tm_ms)
local_client_time_connect	socket_app.h	/^int local_client_time_connect(struct socket_impl *sck, int type, const char *path, int tm_ms);$/;"	p	signature:(struct socket_impl *sck, int type, const char *path, int tm_ms)
local_entry_t	socket_msg.h	/^} local_entry_t;$/;"	t	typeref:struct:local_msg_entry
local_msg_entry	socket_msg.h	/^typedef struct local_msg_entry {$/;"	s
local_msg_entry::handler	socket_msg.h	/^    msg_handler_t   handler;$/;"	m	struct:local_msg_entry	access:public
local_msg_entry::handling_msg	socket_msg.h	/^    struct msg      *handling_msg;$/;"	m	struct:local_msg_entry	typeref:struct:local_msg_entry::msg	access:public
local_msg_entry::ident	socket_msg.h	/^    msg_ident       ident;$/;"	m	struct:local_msg_entry	access:public
local_msg_entry::mod_id	socket_msg.h	/^    mod_id_t        mod_id;$/;"	m	struct:local_msg_entry	access:public
local_msg_entry::mod_reg_sys_uptime	socket_msg.h	/^    unsigned int    mod_reg_sys_uptime;$/;"	m	struct:local_msg_entry	access:public
local_msg_entry::msg_hdled_total	socket_msg.h	/^    unsigned int    msg_hdled_total;$/;"	m	struct:local_msg_entry	access:public
local_msg_entry::mtx	socket_msg.h	/^    pthread_mutex_t mtx;$/;"	m	struct:local_msg_entry	access:public
local_msg_entry::pos	socket_msg.h	/^    int             pos;$/;"	m	struct:local_msg_entry	access:public
local_msg_entry::proc_stop	socket_msg.h	/^    int             proc_stop;$/;"	m	struct:local_msg_entry	access:public
local_msg_entry::proc_thread	socket_msg.h	/^    pthread_t       proc_thread;$/;"	m	struct:local_msg_entry	access:public
local_msg_entry::sem	socket_msg.h	/^    sem_t           sem;$/;"	m	struct:local_msg_entry	access:public
local_server_create	socket/socket_app.h	/^int local_server_create(struct socket_impl *sck, int type, const char *path);$/;"	p	signature:(struct socket_impl *sck, int type, const char *path)
local_server_create	socket_app.h	/^int local_server_create(struct socket_impl *sck, int type, const char *path);$/;"	p	signature:(struct socket_impl *sck, int type, const char *path)
local_socket_startup	socket_base.h	/^int local_socket_startup(int domain, int type, const char *path, int is_ser);$/;"	p	signature:(int domain, int type, const char *path, int is_ser)
lock	thread.h	/^    pthread_mutex_t lock;$/;"	m	struct:thread_impl	access:public
macro_cat	macro.h	10;"	d
macro_to_str	macro.h	6;"	d
make_dir	dir.h	/^int make_dir(char *pathname, mode_t mode);$/;"	p	signature:(char *pathname, mode_t mode)
make_listen_socket_reuseable	sock.h	/^int make_listen_socket_reuseable(int fd);$/;"	p	signature:(int fd)
make_listen_socket_reuseable	socket/socket_property.h	/^int make_listen_socket_reuseable(int fd);$/;"	p	signature:(int fd)
make_listen_socket_reuseable	socket_base.h	/^int make_listen_socket_reuseable(int fd);$/;"	p	signature:(int fd)
make_listen_socket_reuseable	socket_property.h	/^int make_listen_socket_reuseable(int fd);$/;"	p	signature:(int fd)
make_socket_block	sock.h	/^int make_socket_block(int fd);$/;"	p	signature:(int fd)
make_socket_block	socket/socket_property.h	/^int make_socket_block(int fd);$/;"	p	signature:(int fd)
make_socket_block	socket_base.h	/^int make_socket_block(int fd);$/;"	p	signature:(int fd)
make_socket_block	socket_property.h	/^int make_socket_block(int fd);$/;"	p	signature:(int fd)
make_socket_broadcast	sock.h	/^int make_socket_broadcast(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_broadcast	socket/socket_property.h	/^int make_socket_broadcast(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_broadcast	socket_base.h	/^int make_socket_broadcast(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_broadcast	socket_property.h	/^int make_socket_broadcast(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_close_action	sock.h	/^int make_socket_close_action(int fd, int is_on, int tm_s);$/;"	p	signature:(int fd, int is_on, int tm_s)
make_socket_close_action	socket/socket_property.h	/^int make_socket_close_action(int fd, int is_on, int tm_s);$/;"	p	signature:(int fd, int is_on, int tm_s)
make_socket_close_action	socket_base.h	/^int make_socket_close_action(int fd, int is_on, int tm_s);$/;"	p	signature:(int fd, int is_on, int tm_s)
make_socket_close_action	socket_property.h	/^int make_socket_close_action(int fd, int is_on, int tm_s);$/;"	p	signature:(int fd, int is_on, int tm_s)
make_socket_closenexec	sock.h	/^int make_socket_closenexec(int fd);$/;"	p	signature:(int fd)
make_socket_closenexec	socket/socket_property.h	/^int make_socket_closenexec(int fd);$/;"	p	signature:(int fd)
make_socket_closenexec	socket_base.h	/^int make_socket_closenexec(int fd);$/;"	p	signature:(int fd)
make_socket_closenexec	socket_property.h	/^int make_socket_closenexec(int fd);$/;"	p	signature:(int fd)
make_socket_keep_alive	sock.h	/^int make_socket_keep_alive(int fd);$/;"	p	signature:(int fd)
make_socket_keep_alive	socket/socket_property.h	/^int make_socket_keep_alive(int fd);$/;"	p	signature:(int fd)
make_socket_keep_alive	socket_base.h	/^int make_socket_keep_alive(int fd);$/;"	p	signature:(int fd)
make_socket_keep_alive	socket_property.h	/^int make_socket_keep_alive(int fd);$/;"	p	signature:(int fd)
make_socket_multicast_loop	sock.h	/^int make_socket_multicast_loop(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_multicast_loop	socket/socket_property.h	/^int make_socket_multicast_loop(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_multicast_loop	socket_base.h	/^int make_socket_multicast_loop(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_multicast_loop	socket_property.h	/^int make_socket_multicast_loop(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_multicast_ttl	sock.h	/^int make_socket_multicast_ttl(int fd, int ttl);$/;"	p	signature:(int fd, int ttl)
make_socket_multicast_ttl	socket/socket_property.h	/^int make_socket_multicast_ttl(int fd, int ttl);$/;"	p	signature:(int fd, int ttl)
make_socket_multicast_ttl	socket_base.h	/^int make_socket_multicast_ttl(int fd, int ttl);$/;"	p	signature:(int fd, int ttl)
make_socket_multicast_ttl	socket_property.h	/^int make_socket_multicast_ttl(int fd, int ttl);$/;"	p	signature:(int fd, int ttl)
make_socket_nonblock	sock.h	/^int make_socket_nonblock(int fd);$/;"	p	signature:(int fd)
make_socket_nonblock	socket/socket_property.h	/^int make_socket_nonblock(int fd);$/;"	p	signature:(int fd)
make_socket_nonblock	socket_base.h	/^int make_socket_nonblock(int fd);$/;"	p	signature:(int fd)
make_socket_nonblock	socket_property.h	/^int make_socket_nonblock(int fd);$/;"	p	signature:(int fd)
make_socket_promisc	socket/socket_property.h	/^int make_socket_promisc(const char *ifname, int fd, int on);$/;"	p	signature:(const char *ifname, int fd, int on)
make_socket_promisc	socket_base.h	/^int make_socket_promisc(const char *ifname, int fd, int on);$/;"	p	signature:(const char *ifname, int fd, int on)
make_socket_promisc	socket_property.h	/^int make_socket_promisc(const char *ifname, int fd, int on);$/;"	p	signature:(const char *ifname, int fd, int on)
make_socket_recv_timeout	sock.h	/^int make_socket_recv_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
make_socket_recv_timeout	socket/socket_property.h	/^int make_socket_recv_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
make_socket_recv_timeout	socket_base.h	/^int make_socket_recv_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
make_socket_recv_timeout	socket_property.h	/^int make_socket_recv_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
make_socket_send_timeout	sock.h	/^int make_socket_send_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
make_socket_send_timeout	socket/socket_property.h	/^int make_socket_send_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
make_socket_send_timeout	socket_base.h	/^int make_socket_send_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
make_socket_send_timeout	socket_property.h	/^int make_socket_send_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
mask_to_bits	socket/socket_property.h	/^int mask_to_bits(const char *mask);$/;"	p	signature:(const char *mask)
mask_to_bits	socket_base.h	/^int mask_to_bits(const char *mask);$/;"	p	signature:(const char *mask)
mask_to_bits	socket_property.h	/^int mask_to_bits(const char *mask);$/;"	p	signature:(const char *mask)
match_ip	socket/socket_property.h	/^int match_ip(const char *ip);$/;"	p	signature:(const char *ip)
match_ip	socket_base.h	/^int match_ip(const char *ip);$/;"	p	signature:(const char *ip)
match_ip	socket_property.h	/^int match_ip(const char *ip);$/;"	p	signature:(const char *ip)
maxrxpkt	socket/socket_property.h	/^    __u32   maxrxpkt;       \/* Rx pkts before generating rx int *\/  $/;"	m	struct:ethtool_cmd	access:public
maxrxpkt	socket_property.h	/^    __u32   maxrxpkt;       \/* Rx pkts before generating rx int *\/  $/;"	m	struct:ethtool_cmd	access:public
maxtxpkt	socket/socket_property.h	/^    __u32   maxtxpkt;       \/* Tx pkts before generating tx int *\/  $/;"	m	struct:ethtool_cmd	access:public
maxtxpkt	socket_property.h	/^    __u32   maxtxpkt;       \/* Tx pkts before generating tx int *\/  $/;"	m	struct:ethtool_cmd	access:public
mid_trim	cfg.h	/^void mid_trim(char *s);$/;"	p	signature:(char *s)
mod	socket_msg.h	/^    mod_id_t        mod;            \/* which mod this message belong to *\/$/;"	m	struct:msg	access:public
mod_id	socket_msg.h	/^    mod_id_t            mod_id;$/;"	m	struct:shm_entry	access:public
mod_id	socket_msg.h	/^    mod_id_t        mod_id;         \/* module id *\/  $/;"	m	struct:msg_mod_cfg	access:public
mod_id	socket_msg.h	/^    mod_id_t        mod_id;$/;"	m	struct:local_msg_entry	access:public
mod_id_t	socket_msg.h	/^typedef unsigned int    mod_id_t;$/;"	t
mod_reg_sys_uptime	socket_msg.h	/^    unsigned int    mod_reg_sys_uptime;$/;"	m	struct:local_msg_entry	access:public
msg	socket_msg.h	/^typedef struct msg {$/;"	s
msg::body	socket_msg.h	/^     char body[0];$/;"	m	struct:msg	access:public
msg::destructor	socket_msg.h	/^    void (*destructor)(void *);$/;"	m	struct:msg	access:public
msg::dst_id	socket_msg.h	/^    mod_id_t        dst_id;$/;"	m	struct:msg	access:public
msg::endian	socket_msg.h	/^    unsigned char   endian;$/;"	m	struct:msg	access:public
msg::free_ptr	socket_msg.h	/^    void            *free_ptr;$/;"	m	struct:msg	access:public
msg::hold_cnt	socket_msg.h	/^    unsigned int    hold_cnt;$/;"	m	struct:msg	access:public
msg::len	socket_msg.h	/^    unsigned int    len;            \/* message body length *\/$/;"	m	struct:msg	access:public
msg::mod	socket_msg.h	/^    mod_id_t        mod;            \/* which mod this message belong to *\/$/;"	m	struct:msg	access:public
msg::msg_id	socket_msg.h	/^    unsigned int    msg_id;         \/* msg id, module releated *\/$/;"	m	struct:msg	access:public
msg::next	socket_msg.h	/^    struct msg      *next;$/;"	m	struct:msg	typeref:struct:msg::msg	access:public
msg::src_id	socket_msg.h	/^    mod_id_t        src_id;$/;"	m	struct:msg	access:public
msg_ctl	socket_msg.h	/^typedef struct msg_ctl {$/;"	s
msg_ctl::ipc_fd	socket_msg.h	/^    int         ipc_fd;$/;"	m	struct:msg_ctl	access:public
msg_ctl::ipc_stop	socket_msg.h	/^    int         ipc_stop;$/;"	m	struct:msg_ctl	access:public
msg_ctl::ipc_thread	socket_msg.h	/^    pthread_t   ipc_thread;$/;"	m	struct:msg_ctl	access:public
msg_ctl::loc_ctl	socket_msg.h	/^    struct loc_ctl {$/;"	s	struct:msg_ctl	access:public
msg_ctl::loc_ctl::reg_tbl	socket_msg.h	/^        struct local_msg_entry  reg_tbl[ MOD_MAX ];$/;"	m	struct:msg_ctl::loc_ctl	typeref:struct:msg_ctl::loc_ctl::local_msg_entry	access:public
msg_ctl::loc_ctl::rwlock	socket_msg.h	/^        pthread_rwlock_t        rwlock;$/;"	m	struct:msg_ctl::loc_ctl	access:public
msg_ctl::p_loc_ctl	socket_msg.h	/^    } *p_loc_ctl;$/;"	m	struct:msg_ctl	typeref:struct:msg_ctl::loc_ctl	access:public
msg_ctl::p_shm_ctl	socket_msg.h	/^    } *p_shm_ctl;$/;"	m	struct:msg_ctl	typeref:struct:msg_ctl::shm_ctl	access:public
msg_ctl::shm_ctl	socket_msg.h	/^    struct shm_ctl {$/;"	s	struct:msg_ctl	access:public
msg_ctl::shm_ctl::reg_tbl	socket_msg.h	/^        struct shm_entry    reg_tbl[ MOD_MAX ];$/;"	m	struct:msg_ctl::shm_ctl	typeref:struct:msg_ctl::shm_ctl::shm_entry	access:public
msg_ctl::shm_ctl::rwlock	socket_msg.h	/^        pthread_rwlock_t    rwlock;$/;"	m	struct:msg_ctl::shm_ctl	access:public
msg_ctl_t	socket_msg.h	/^} msg_ctl_t;$/;"	t	typeref:struct:msg_ctl
msg_flag_t	socket_msg.h	/^typedef unsigned int    msg_flag_t;$/;"	t
msg_handler_t	socket_msg.h	/^typedef void            ( *msg_handler_t )(struct msg *msg);$/;"	t
msg_hdled_total	socket_msg.h	/^    unsigned int    msg_hdled_total;$/;"	m	struct:local_msg_entry	access:public
msg_id	socket_msg.h	/^    unsigned int    msg_id;         \/* msg id, module releated *\/$/;"	m	struct:msg	access:public
msg_ident	socket_msg.h	/^typedef msg_flag_t      ( *msg_ident )(struct msg *msg);$/;"	t
msg_mod_cfg	socket_msg.h	/^typedef struct msg_mod_cfg {$/;"	s
msg_mod_cfg::handler	socket_msg.h	/^    msg_handler_t   handler;        \/* message handler *\/$/;"	m	struct:msg_mod_cfg	access:public
msg_mod_cfg::mod_id	socket_msg.h	/^    mod_id_t        mod_id;         \/* module id *\/  $/;"	m	struct:msg_mod_cfg	access:public
msg_mod_cfg::name	socket_msg.h	/^    char            *name;          \/* module name *\/$/;"	m	struct:msg_mod_cfg	access:public
msg_mod_cfg::thread_id	socket_msg.h	/^    pthread_t       thread_id;      \/* thread id *\/$/;"	m	struct:msg_mod_cfg	access:public
msg_mod_cfg_t	socket_msg.h	/^} msg_mod_cfg_t;$/;"	t	typeref:struct:msg_mod_cfg
msg_rst	socket_msg.h	/^typedef enum msg_rst {$/;"	g
msg_rst_t	socket_msg.h	/^} msg_rst_t;$/;"	t	typeref:enum:msg_rst
msg_t	socket_msg.h	/^} msg_t;$/;"	t	typeref:struct:msg
mtx	socket_msg.h	/^    pthread_mutex_t mtx;$/;"	m	struct:local_msg_entry	access:public
name	socket_msg.h	/^    char            *name;          \/* module name *\/$/;"	m	struct:msg_mod_cfg	access:public
next	socket_msg.h	/^    struct msg      *next;$/;"	m	struct:msg	typeref:struct:msg::msg	access:public
offset_of	macro.h	41;"	d
on_accept	sock.h	/^    callback on_accept;$/;"	m	struct:event_loop	access:public
on_accept	socket/socket_event.h	/^    struct call_back on_accept;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
on_accept	socket_event.h	/^    struct call_back on_accept;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
on_close	sock.h	/^    callback on_close;$/;"	m	struct:event_loop	access:public
on_close	socket/socket_event.h	/^    struct call_back on_close;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
on_close	socket_event.h	/^    struct call_back on_close;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
on_close_f	sock.h	/^    on_close_runtine on_close_f;$/;"	m	struct:sock	access:public
on_close_runtine	sock.h	/^typedef void (*on_close_runtine)(struct sock *sck, int cli_fd_i);$/;"	t
on_close_runtine	sock.h	/^typedef void (*on_close_runtine)(struct sock *sck, int fd);$/;"	t
on_connect	sock.h	/^    callback on_connect;$/;"	m	struct:event_loop	access:public
on_connect	socket/socket_event.h	/^    struct call_back on_connect;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
on_connect	socket_event.h	/^    struct call_back on_connect;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
on_recv	sock.h	/^    callback on_recv;$/;"	m	struct:event_loop	access:public
on_recv	socket/socket_event.h	/^    struct call_back on_recv;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
on_recv	socket_event.h	/^    struct call_back on_recv;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
on_recv_f	sock.h	/^    on_recv_runtine on_recv_f;$/;"	m	struct:sock	access:public
on_recv_runtine	sock.h	/^typedef void (*on_recv_runtine)(struct sock *sck, int cli_fd_i);$/;"	t
on_recv_runtine	sock.h	/^typedef void (*on_recv_runtine)(struct sock *sck, int fd);$/;"	t
on_send	sock.h	/^    callback on_send;$/;"	m	struct:event_loop	access:public
on_send	socket/socket_event.h	/^    struct call_back on_send;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
on_send	socket_event.h	/^    struct call_back on_send;$/;"	m	struct:event_loop	typeref:struct:event_loop::call_back	access:public
p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon1	access:public
p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon2	access:public
p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon3	access:public
p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon4	access:public
p	libsc_timer.h	/^        void *p;$/;"	m	union:libsc_timer::__anon6	access:public
p	sock.h	/^        void *p;$/;"	m	union:sock::__anon1	access:public
p	sock.h	/^        void *p;$/;"	m	union:sock_data::__anon1	access:public
p	sock.h	/^        void *p;$/;"	m	union:socket_data::__anon1	access:public
p	timer.h	/^        void *p;$/;"	m	union:timer::__anon2	access:public
p	timer.h	/^        void *p;$/;"	m	union:timer::__anon3	access:public
p	timer.h	/^        void *p;$/;"	m	union:timer::__anon5	access:public
p_loc_ctl	socket_msg.h	/^    } *p_loc_ctl;$/;"	m	struct:msg_ctl	typeref:struct:msg_ctl::loc_ctl	access:public
p_msg_ctl	socket_msg.h	/^struct msg_ctl *p_msg_ctl = NULL;$/;"	v	typeref:struct:msg_ctl
p_shm_ctl	socket_msg.h	/^    } *p_shm_ctl;$/;"	m	struct:msg_ctl	typeref:struct:msg_ctl::shm_ctl	access:public
parse_ether_head	socket/socket_app.h	/^int parse_ether_head(void *data, unsigned char dhost[6], \\$/;"	p	signature:(void *data, unsigned char dhost[6], \ unsigned char shost[6], unsigned short *proto_type)
parse_ether_head	socket_app.h	/^int parse_ether_head(void *data, unsigned char dhost[6], \\$/;"	p	signature:(void *data, unsigned char dhost[6], \ unsigned char shost[6], unsigned short *proto_type)
parse_icmp_head	socket/socket_app.h	/^int parse_icmp_head(void *data, unsigned char *type, unsigned char *code);$/;"	p	signature:(void *data, unsigned char *type, unsigned char *code)
parse_icmp_head	socket_app.h	/^int parse_icmp_head(void *data, unsigned char *type, unsigned char *code);$/;"	p	signature:(void *data, unsigned char *type, unsigned char *code)
parse_ping	socket/socket_app.h	/^int parse_ping(void *data);$/;"	p	signature:(void *data)
parse_ping	socket_app.h	/^int parse_ping(void *data);$/;"	p	signature:(void *data)
phy_address	socket/socket_property.h	/^    __u8    phy_address;  $/;"	m	struct:ethtool_cmd	access:public
phy_address	socket_property.h	/^    __u8    phy_address;  $/;"	m	struct:ethtool_cmd	access:public
pid	thread.h	/^    pthread_t pid;$/;"	m	struct:thread_impl	access:public
ping_hdr	socket/socket_header.h	/^struct ping_hdr {$/;"	s
ping_hdr	socket_header.h	/^struct ping_hdr {$/;"	s
ping_hdr::i_id	socket/socket_header.h	/^    unsigned char i_id;$/;"	m	struct:ping_hdr	access:public
ping_hdr::i_id	socket_header.h	/^    unsigned char i_id;$/;"	m	struct:ping_hdr	access:public
ping_hdr::i_seq	socket/socket_header.h	/^    unsigned char i_seq;$/;"	m	struct:ping_hdr	access:public
ping_hdr::i_seq	socket_header.h	/^    unsigned char i_seq;$/;"	m	struct:ping_hdr	access:public
port	socket/socket_property.h	/^    __u8    port;           \/* Which connector port *\/  $/;"	m	struct:ethtool_cmd	access:public
port	socket_property.h	/^    __u8    port;           \/* Which connector port *\/  $/;"	m	struct:ethtool_cmd	access:public
pos	socket_msg.h	/^    int             pos;$/;"	m	struct:local_msg_entry	access:public
print_dir	dir.h	/^void print_dir(const char *pathname);$/;"	p	signature:(const char *pathname)
print_mac	socket/socket_app.h	/^void print_mac(const char *info, unsigned char mac_addr[6]);$/;"	p	signature:(const char *info, unsigned char mac_addr[6])
print_mac	socket_app.h	/^void print_mac(const char *info, unsigned char mac_addr[6]);$/;"	p	signature:(const char *info, unsigned char mac_addr[6])
proc_stop	socket_msg.h	/^    int             proc_stop;$/;"	m	struct:local_msg_entry	access:public
proc_thread	socket_msg.h	/^    pthread_t       proc_thread;$/;"	m	struct:local_msg_entry	access:public
process_runtine	sock.h	/^typedef void* (*process_runtine)(void *arg);$/;"	t
proto_type	socket/socket_header.h	/^        unsigned short proto_type;$/;"	m	struct:frame_hdr	access:public
proto_type	socket/socket_header.h	/^    unsigned short proto_type;$/;"	m	struct:ether_hdr	access:public
proto_type	socket_header.h	/^    unsigned short proto_type;$/;"	m	struct:ether_hdr	access:public
ptd	sock.h	/^    pthread_t ptd;$/;"	m	struct:sock	access:public
ptd	sock.h	/^    pthread_t ptd;$/;"	m	struct:socket	access:public
ptd	socket/socket_app.h	/^    pthread_t ptd;$/;"	m	struct:socket_impl	access:public
ptd	socket_app.h	/^    pthread_t ptd;$/;"	m	struct:socket_impl	access:public
pthread	sock.h	/^    pthread_t pthread;$/;"	m	struct:sock	access:public
pthread_delete	thread.h	/^int pthread_delete(thread_t *impl);$/;"	p	signature:(thread_t *impl)
pthread_exec	thread.h	/^void pthread_exec(thread_t *impl, pthread_runtine runtine, void *arg);$/;"	p	signature:(thread_t *impl, pthread_runtine runtine, void *arg)
pthread_lock	thread.h	/^int pthread_lock(thread_t *impl);$/;"	p	signature:(thread_t *impl)
pthread_run	thread.h	/^void pthread_run(thread_t *impl);$/;"	p	signature:(thread_t *impl)
pthread_runtine	thread.h	/^typedef void* (*pthread_runtine)(void*);$/;"	t
pthread_start	thread.h	/^int pthread_start(thread_t *impl, pthread_runtine runtine, void *arg, int run, int keep);$/;"	p	signature:(thread_t *impl, pthread_runtine runtine, void *arg, int run, int keep)
pthread_time_wait_over	thread.h	/^void pthread_time_wait_over(thread_t *impl, int tm_ms);$/;"	p	signature:(thread_t *impl, int tm_ms)
pthread_trylock	thread.h	/^int pthread_trylock(thread_t *impl);$/;"	p	signature:(thread_t *impl)
pthread_unlock	thread.h	/^int pthread_unlock(thread_t *impl);$/;"	p	signature:(thread_t *impl)
pthread_wait_over	thread.h	/^void pthread_wait_over(thread_t *impl);$/;"	p	signature:(thread_t *impl)
pthread_worker	thread.h	/^typedef struct pthread_worker $/;"	s
pthread_worker::arg	thread.h	/^    void *arg;$/;"	m	struct:pthread_worker	access:public
pthread_worker::runtine	thread.h	/^    pthread_runtine runtine;$/;"	m	struct:pthread_worker	access:public
pthread_worker_t	thread.h	/^} pthread_worker_t;$/;"	t	typeref:struct:pthread_worker
r_trim	cfg.h	/^void r_trim(char *s);$/;"	p	signature:(char *s)
raw_socket_init	socket/socket_app.h	/^int raw_socket_init();$/;"	p
raw_socket_init	socket_app.h	/^int raw_socket_init();$/;"	p
ready	thread.h	/^    pthread_cond_t ready;$/;"	m	struct:thread_impl	access:public
reg_tbl	socket_msg.h	/^        struct local_msg_entry  reg_tbl[ MOD_MAX ];$/;"	m	struct:msg_ctl::loc_ctl	typeref:struct:msg_ctl::loc_ctl::local_msg_entry	access:public
reg_tbl	socket_msg.h	/^        struct shm_entry    reg_tbl[ MOD_MAX ];$/;"	m	struct:msg_ctl::shm_ctl	typeref:struct:msg_ctl::shm_ctl::shm_entry	access:public
remove_dir	dir.h	/^int remove_dir(const char *pathname);$/;"	p	signature:(const char *pathname)
remove_file	dir.h	/^int remove_file(const char *pathname);$/;"	p	signature:(const char *pathname)
repeat	libsc_timer.h	/^    int repeat;$/;"	m	struct:libsc_timer_impl	access:public
repeat	timer.h	/^    int repeat;$/;"	m	struct:timer_impl	access:public
reserved	socket/socket_property.h	/^    __u32   reserved[4];  $/;"	m	struct:ethtool_cmd	access:public
reserved	socket_property.h	/^    __u32   reserved[4];  $/;"	m	struct:ethtool_cmd	access:public
run	thread.h	/^    int run;$/;"	m	struct:thread_impl	access:public
runtine	thread.h	/^    pthread_runtine runtine;$/;"	m	struct:pthread_worker	access:public
rwlock	socket_msg.h	/^        pthread_rwlock_t        rwlock;$/;"	m	struct:msg_ctl::loc_ctl	access:public
rwlock	socket_msg.h	/^        pthread_rwlock_t    rwlock;$/;"	m	struct:msg_ctl::shm_ctl	access:public
s	sock.h	/^        char s[0];$/;"	m	union:sock_data::__anon1	access:public
s	sock.h	/^        char s[0];$/;"	m	union:socket_data::__anon1	access:public
sctp_client_connect	socket/socket_app.h	/^int sctp_client_connect(struct socket_impl *sck, const char *ip, unsigned short port);$/;"	p	signature:(struct socket_impl *sck, const char *ip, unsigned short port)
sctp_server_create	socket/socket_app.h	/^int sctp_server_create(struct socket_impl *sck, const char *ip, unsigned short port);$/;"	p	signature:(struct socket_impl *sck, const char *ip, unsigned short port)
sem	socket_msg.h	/^    sem_t           sem;$/;"	m	struct:local_msg_entry	access:public
server_create	sock.h	/^int server_create(struct socket *sck, int domain, int type, \\$/;"	p	signature:(struct socket *sck, int domain, int type, \ u_short port, const char *ip)
server_create	sock.h	/^int server_create(struct socket *sck, int domain, int type, u_short port, const char *ip);$/;"	p	signature:(struct socket *sck, int domain, int type, u_short port, const char *ip)
server_stop	sock.h	/^void server_stop(struct socket *sck);$/;"	p	signature:(struct socket *sck)
server_stop	socket/socket_app.h	/^void server_stop(struct socket_impl *sck);$/;"	p	signature:(struct socket_impl *sck)
server_stop	socket_app.h	/^void server_stop(struct socket_impl *sck);$/;"	p	signature:(struct socket_impl *sck)
set_socket_block	sock.h	/^int set_socket_block(int fd);$/;"	p	signature:(int fd)
set_socket_recv_buf	sock.h	/^int set_socket_recv_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
set_socket_recv_buf	socket/socket_property.h	/^int set_socket_recv_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
set_socket_recv_buf	socket_base.h	/^int set_socket_recv_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
set_socket_recv_buf	socket_property.h	/^int set_socket_recv_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
set_socket_send_buf	sock.h	/^int set_socket_send_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
set_socket_send_buf	socket/socket_property.h	/^int set_socket_send_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
set_socket_send_buf	socket_base.h	/^int set_socket_send_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
set_socket_send_buf	socket_property.h	/^int set_socket_send_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
set_socket_unblock	sock.h	/^int set_socket_unblock(int fd);$/;"	p	signature:(int fd)
shm_ctl	socket_msg.h	/^    struct shm_ctl {$/;"	s	struct:msg_ctl	access:public
shm_entry	socket_msg.h	/^typedef struct shm_entry {$/;"	s
shm_entry::flag	socket_msg.h	/^    int                 flag;$/;"	m	struct:shm_entry	access:public
shm_entry::in_addr	socket_msg.h	/^    struct sockaddr_in  in_addr;$/;"	m	struct:shm_entry	typeref:struct:shm_entry::sockaddr_in	access:public
shm_entry::mod_id	socket_msg.h	/^    mod_id_t            mod_id;$/;"	m	struct:shm_entry	access:public
shm_entry::un_addr	socket_msg.h	/^    struct sockaddr_un  un_addr;$/;"	m	struct:shm_entry	typeref:struct:shm_entry::sockaddr_un	access:public
shm_entry_t	socket_msg.h	/^} shm_entry_t;$/;"	t	typeref:struct:shm_entry
size	sock.h	/^    unsigned long size;$/;"	m	struct:sock_data	access:public
size	sock.h	/^    unsigned long size;$/;"	m	struct:socket_data	access:public
sock	sock.h	/^struct sock$/;"	s
sock::__anon1::i	sock.h	/^        int i;$/;"	m	union:sock::__anon1	access:public
sock::__anon1::p	sock.h	/^        void *p;$/;"	m	union:sock::__anon1	access:public
sock::__anon1::sz	sock.h	/^        char *sz;$/;"	m	union:sock::__anon1	access:public
sock::active	sock.h	/^    int active;$/;"	m	struct:sock	access:public
sock::addr	sock.h	/^    struct sockaddr_in addr;$/;"	m	struct:sock	typeref:struct:sock::sockaddr_in	access:public
sock::cli_fd	sock.h	/^    int cli_fd[MAX_CLIENT_NUM];$/;"	m	struct:sock	access:public
sock::conn_flag	sock.h	/^    int conn_flag;$/;"	m	struct:sock	access:public
sock::data	sock.h	/^    sock_data_t data;$/;"	m	struct:sock	access:public
sock::evl	sock.h	/^    event_loop_t evl;$/;"	m	struct:sock	access:public
sock::fd	sock.h	/^    int fd;$/;"	m	struct:sock	access:public
sock::on_close_f	sock.h	/^    on_close_runtine on_close_f;$/;"	m	struct:sock	access:public
sock::on_recv_f	sock.h	/^    on_recv_runtine on_recv_f;$/;"	m	struct:sock	access:public
sock::ptd	sock.h	/^    pthread_t ptd;$/;"	m	struct:sock	access:public
sock::pthread	sock.h	/^    pthread_t pthread;$/;"	m	struct:sock	access:public
sock_data	sock.h	/^typedef struct sock_data$/;"	s
sock_data::__anon1::i	sock.h	/^        int i;$/;"	m	union:sock_data::__anon1	access:public
sock_data::__anon1::p	sock.h	/^        void *p;$/;"	m	union:sock_data::__anon1	access:public
sock_data::__anon1::s	sock.h	/^        char s[0];$/;"	m	union:sock_data::__anon1	access:public
sock_data::size	sock.h	/^    unsigned long size;$/;"	m	struct:sock_data	access:public
sock_data::type	sock.h	/^    data_type type;$/;"	m	struct:sock_data	access:public
sock_data::value	sock.h	/^    } value;$/;"	m	struct:sock_data	typeref:union:sock_data::__anon1	access:public
sock_data_t	sock.h	/^} sock_data_t;$/;"	t	typeref:struct:sock_data
sock_data_type	sock.h	/^typedef enum sock_data_type$/;"	g
sock_runtine	sock.h	/^void* sock_runtine(void *args);$/;"	p	signature:(void *args)
sock_t	sock.h	/^typedef struct sock sock_t;$/;"	t	typeref:struct:sock
socket	sock.h	/^struct socket$/;"	s
socket::addr	sock.h	/^    struct sockaddr_in addr;$/;"	m	struct:socket	typeref:struct:socket::sockaddr_in	access:public
socket::cli_fd	sock.h	/^    int cli_fd[MAX_CLIENT_NUM];$/;"	m	struct:socket	access:public
socket::data	sock.h	/^    socket_data_t data;$/;"	m	struct:socket	access:public
socket::evl	sock.h	/^    event_loop_t evl;$/;"	m	struct:socket	access:public
socket::fd	sock.h	/^    int fd;$/;"	m	struct:socket	access:public
socket::ptd	sock.h	/^    pthread_t ptd;$/;"	m	struct:socket	access:public
socket_accept	sock.h	/^int socket_accept(int fd);$/;"	p	signature:(int fd)
socket_accept	sock.h	/^int socket_accept(int fd, struct sockaddr_in *cli_addr);$/;"	p	signature:(int fd, struct sockaddr_in *cli_addr)
socket_accept	socket/socket_base.h	/^int socket_accept(int fd);$/;"	p	signature:(int fd)
socket_accept	socket_base.h	/^int socket_accept(int fd);$/;"	p	signature:(int fd)
socket_addr_data_recvfrom	sock.h	/^int socket_addr_data_recvfrom(int fd, socket_data_type *type, \\$/;"	p	signature:(int fd, socket_data_type *type, \ void *buf, int size, void *addr)
socket_addr_data_recvfrom	sock.h	/^int socket_addr_data_recvfrom(int fd, socket_data_type *type, void *buf, int size, void *addr);$/;"	p	signature:(int fd, socket_data_type *type, void *buf, int size, void *addr)
socket_addr_data_sendto	sock.h	/^int socket_addr_data_sendto(int fd, socket_data_type type, \\$/;"	p	signature:(int fd, socket_data_type type, \ void *buf, int size, void *addr)
socket_addr_data_sendto	sock.h	/^int socket_addr_data_sendto(int fd, socket_data_type type, void *buf, int size, void *addr);$/;"	p	signature:(int fd, socket_data_type type, void *buf, int size, void *addr)
socket_addr_init	sock.h	/^void socket_addr_init(struct sockaddr_in *addr, u_short port, const char *ip);$/;"	p	signature:(struct sockaddr_in *addr, u_short port, const char *ip)
socket_addr_init	sock.h	/^void socket_addr_init(void *addr, int domain, u_short port, const char *ip);$/;"	p	signature:(void *addr, int domain, u_short port, const char *ip)
socket_addr_recvfrom	sock.h	/^int socket_addr_recvfrom(int fd, void *buf, int size, void *addr);$/;"	p	signature:(int fd, void *buf, int size, void *addr)
socket_addr_recvfrom	socket/socket_base.h	/^int socket_addr_recvfrom(int fd, void *buf, int size, void *addr);$/;"	p	signature:(int fd, void *buf, int size, void *addr)
socket_addr_recvfrom	socket_base.h	/^int socket_addr_recvfrom(int fd, void *buf, int size, void *addr);$/;"	p	signature:(int fd, void *buf, int size, void *addr)
socket_addr_sendto	sock.h	/^int socket_addr_sendto(int fd, void *buf, int size, void *addr);$/;"	p	signature:(int fd, void *buf, int size, void *addr)
socket_addr_sendto	socket/socket_base.h	/^int socket_addr_sendto(int fd, void *buf, int size, void *addr);$/;"	p	signature:(int fd, void *buf, int size, void *addr)
socket_addr_sendto	socket_base.h	/^int socket_addr_sendto(int fd, void *buf, int size, void *addr);$/;"	p	signature:(int fd, void *buf, int size, void *addr)
socket_bind	sock.h	/^int socket_bind(int fd, int port, const char *ip, struct sockaddr_in *addr);$/;"	p	signature:(int fd, int port, const char *ip, struct sockaddr_in *addr)
socket_bind	sock.h	/^int socket_bind(int fd, struct sockaddr_in *addr, u_short *port);$/;"	p	signature:(int fd, struct sockaddr_in *addr, u_short *port)
socket_bind	sock.h	/^int socket_bind(int fd, void *addr);$/;"	p	signature:(int fd, void *addr)
socket_bind	socket/socket_base.h	/^int socket_bind(int fd, struct sockaddr *addr);$/;"	p	signature:(int fd, struct sockaddr *addr)
socket_bind	socket_base.h	/^int socket_bind(int fd, struct sockaddr *addr);$/;"	p	signature:(int fd, struct sockaddr *addr)
socket_close	sock.h	/^int socket_close(int fd);$/;"	p	signature:(int fd)
socket_close	socket/socket_base.h	/^int socket_close(int fd);$/;"	p	signature:(int fd)
socket_close	socket_base.h	/^int socket_close(int fd);$/;"	p	signature:(int fd)
socket_connect	sock.h	/^int socket_connect(int fd, struct sockaddr_in *cli_addr);$/;"	p	signature:(int fd, struct sockaddr_in *cli_addr)
socket_connect	sock.h	/^int socket_connect(int fd, void *cli_addr);$/;"	p	signature:(int fd, void *cli_addr)
socket_connect	socket/socket_base.h	/^int socket_connect(int fd, void *cli_addr);$/;"	p	signature:(int fd, void *cli_addr)
socket_connect	socket_base.h	/^int socket_connect(int fd, void *cli_addr);$/;"	p	signature:(int fd, void *cli_addr)
socket_create	sock.h	/^int socket_create(int domain, int type);$/;"	p	signature:(int domain, int type)
socket_create	socket/socket_base.h	/^int socket_create(int domain, int type);$/;"	p	signature:(int domain, int type)
socket_create	socket/socket_base.h	/^int socket_create(int domain, int type, int protocol);$/;"	p	signature:(int domain, int type, int protocol)
socket_create	socket_base.h	/^int socket_create(int domain, int type);$/;"	p	signature:(int domain, int type)
socket_data	sock.h	/^typedef struct socket_data$/;"	s
socket_data::__anon1::i	sock.h	/^        int i;$/;"	m	union:socket_data::__anon1	access:public
socket_data::__anon1::p	sock.h	/^        void *p;$/;"	m	union:socket_data::__anon1	access:public
socket_data::__anon1::s	sock.h	/^        char s[0];$/;"	m	union:socket_data::__anon1	access:public
socket_data::size	sock.h	/^    unsigned long size;$/;"	m	struct:socket_data	access:public
socket_data::type	sock.h	/^    socket_data_type type;$/;"	m	struct:socket_data	access:public
socket_data::value	sock.h	/^    } value;$/;"	m	struct:socket_data	typeref:union:socket_data::__anon1	access:public
socket_data_recv	sock.h	/^int socket_data_recv(int fd, data_type *type, void *buf, int size);$/;"	p	signature:(int fd, data_type *type, void *buf, int size)
socket_data_recv	sock.h	/^int socket_data_recv(int fd, socket_data_type *type, \\$/;"	p	signature:(int fd, socket_data_type *type, \ void *buf, int size)
socket_data_recv	sock.h	/^int socket_data_recv(int fd, socket_data_type *type, void *buf, int size);$/;"	p	signature:(int fd, socket_data_type *type, void *buf, int size)
socket_data_recvfrom	sock.h	/^int socket_data_recvfrom(int fd, socket_data_type *type, \\$/;"	p	signature:(int fd, socket_data_type *type, \ void *buf, int size, const char *ip, int port)
socket_data_recvfrom	sock.h	/^int socket_data_recvfrom(int fd, socket_data_type *type, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, socket_data_type *type, void *buf, int size, const char *ip, int port)
socket_data_send	sock.h	/^int socket_data_send(int fd, data_type type, void *buf, int size);$/;"	p	signature:(int fd, data_type type, void *buf, int size)
socket_data_send	sock.h	/^int socket_data_send(int fd, socket_data_type type, void *buf, int size);$/;"	p	signature:(int fd, socket_data_type type, void *buf, int size)
socket_data_sendto	sock.h	/^int socket_data_sendto(int fd, socket_data_type type, \\$/;"	p	signature:(int fd, socket_data_type type, \ void *buf, int size, const char *ip, int port)
socket_data_sendto	sock.h	/^int socket_data_sendto(int fd, socket_data_type type, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, socket_data_type type, void *buf, int size, const char *ip, int port)
socket_data_t	sock.h	/^} socket_data_t;$/;"	t	typeref:struct:socket_data
socket_data_time_recv	sock.h	/^int socket_data_time_recv(int fd, socket_data_type *type, \\$/;"	p	signature:(int fd, socket_data_type *type, \ void *buf, int size, int time_ms)
socket_data_time_recv	sock.h	/^int socket_data_time_recv(int fd, socket_data_type *type, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, socket_data_type *type, void *buf, int size, int time_ms)
socket_data_type	sock.h	/^typedef enum socket_data_type$/;"	g
socket_data_type	sock.h	/^} socket_data_type;$/;"	t	typeref:enum:socket_data_type
socket_event_add	sock.h	/^void socket_event_add(event_loop_t *evl, event_type_t evt, event_callback cb, void *arg);$/;"	p	signature:(event_loop_t *evl, event_type_t evt, event_callback cb, void *arg)
socket_event_add	sock.h	/^void socket_event_add(event_loop_t *evl, event_type_t evt, event_cb cb, void *arg);$/;"	p	signature:(event_loop_t *evl, event_type_t evt, event_cb cb, void *arg)
socket_event_add	socket/socket_event.h	/^void socket_event_add(event_loop_t *evl, event_type_t evt, event_cb cb, void *arg);$/;"	p	signature:(event_loop_t *evl, event_type_t evt, event_cb cb, void *arg)
socket_event_add	socket_event.h	/^void socket_event_add(event_loop_t *evl, event_type_t evt, event_cb cb, void *arg);$/;"	p	signature:(event_loop_t *evl, event_type_t evt, event_cb cb, void *arg)
socket_event_clearall	sock.h	/^void socket_event_clearall(event_loop_t *evl);$/;"	p	signature:(event_loop_t *evl)
socket_event_clearall	socket/socket_event.h	/^void socket_event_clearall(event_loop_t *evl);$/;"	p	signature:(event_loop_t *evl)
socket_event_clearall	socket_event.h	/^void socket_event_clearall(event_loop_t *evl);$/;"	p	signature:(event_loop_t *evl)
socket_event_delete	sock.h	/^void socket_event_delete(event_loop_t *evl, event_type_t evt);$/;"	p	signature:(event_loop_t *evl, event_type_t evt)
socket_event_delete	socket/socket_event.h	/^void socket_event_delete(event_loop_t *evl, event_type_t evt);$/;"	p	signature:(event_loop_t *evl, event_type_t evt)
socket_event_delete	socket_event.h	/^void socket_event_delete(event_loop_t *evl, event_type_t evt);$/;"	p	signature:(event_loop_t *evl, event_type_t evt)
socket_event_init	sock.h	/^void socket_event_init(event_loop_t *evl);$/;"	p	signature:(event_loop_t *evl)
socket_event_init	socket/socket_event.h	/^void socket_event_init(event_loop_t *evl);$/;"	p	signature:(event_loop_t *evl)
socket_event_init	socket_event.h	/^void socket_event_init(event_loop_t *evl);$/;"	p	signature:(event_loop_t *evl)
socket_event_process	sock.h	/^void socket_event_process(int fd, callback cb);$/;"	p	signature:(int fd, callback cb)
socket_event_process	socket/socket_event.h	/^void socket_event_process(int fd, struct call_back cb);$/;"	p	signature:(int fd, struct call_back cb)
socket_event_process	socket_event.h	/^void socket_event_process(int fd, struct call_back cb);$/;"	p	signature:(int fd, struct call_back cb)
socket_impl	socket/socket_app.h	/^typedef struct socket_impl$/;"	s
socket_impl	socket_app.h	/^typedef struct socket_impl$/;"	s
socket_impl::__anon2::addr	socket/socket_app.h	/^        struct sockaddr addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr	access:public
socket_impl::__anon2::in_addr	socket/socket_app.h	/^        struct sockaddr_in in_addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr_in	access:public
socket_impl::__anon2::in_addr	socket_app.h	/^        struct sockaddr_in in_addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr_in	access:public
socket_impl::__anon2::un_addr	socket/socket_app.h	/^        struct sockaddr_un un_addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr_un	access:public
socket_impl::__anon2::un_addr	socket_app.h	/^        struct sockaddr_un un_addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr_un	access:public
socket_impl::__anon3::addr	socket/socket_app.h	/^        struct sockaddr addr;$/;"	m	union:socket_impl::__anon3	typeref:struct:socket_impl::__anon3::sockaddr	access:public
socket_impl::__anon3::in_addr	socket/socket_app.h	/^        struct sockaddr_in in_addr;$/;"	m	union:socket_impl::__anon3	typeref:struct:socket_impl::__anon3::sockaddr_in	access:public
socket_impl::__anon3::un_addr	socket/socket_app.h	/^        struct sockaddr_un un_addr;$/;"	m	union:socket_impl::__anon3	typeref:struct:socket_impl::__anon3::sockaddr_un	access:public
socket_impl::addr	socket/socket_app.h	/^    } addr;$/;"	m	struct:socket_impl	typeref:union:socket_impl::__anon2	access:public
socket_impl::addr	socket/socket_app.h	/^    } addr;$/;"	m	struct:socket_impl	typeref:union:socket_impl::__anon3	access:public
socket_impl::addr	socket_app.h	/^    } addr;$/;"	m	struct:socket_impl	typeref:union:socket_impl::__anon2	access:public
socket_impl::body	socket/socket_app.h	/^    char body[0];$/;"	m	struct:socket_impl	access:public
socket_impl::body	socket_app.h	/^    char body[0];$/;"	m	struct:socket_impl	access:public
socket_impl::cli_fd	socket/socket_app.h	/^    int cli_fd[MAX_CLIENT_NUM];$/;"	m	struct:socket_impl	access:public
socket_impl::cli_fd	socket_app.h	/^    int cli_fd[MAX_CLIENT_NUM];$/;"	m	struct:socket_impl	access:public
socket_impl::curr_cli_fd	socket/socket_app.h	/^    int curr_cli_fd;$/;"	m	struct:socket_impl	access:public
socket_impl::evl	socket/socket_app.h	/^    event_loop_t evl;$/;"	m	struct:socket_impl	access:public
socket_impl::evl	socket_app.h	/^    event_loop_t evl;$/;"	m	struct:socket_impl	access:public
socket_impl::fd	socket/socket_app.h	/^    int fd;$/;"	m	struct:socket_impl	access:public
socket_impl::fd	socket_app.h	/^    int fd;$/;"	m	struct:socket_impl	access:public
socket_impl::ptd	socket/socket_app.h	/^    pthread_t ptd;$/;"	m	struct:socket_impl	access:public
socket_impl::ptd	socket_app.h	/^    pthread_t ptd;$/;"	m	struct:socket_impl	access:public
socket_impl_t	socket/socket_app.h	/^} socket_impl_t;$/;"	t	typeref:struct:socket_impl
socket_impl_t	socket_app.h	/^} socket_impl_t;$/;"	t	typeref:struct:socket_impl
socket_init	sock.h	/^void socket_init(struct sockaddr_in *addr, const char *ip, int port);$/;"	p	signature:(struct sockaddr_in *addr, const char *ip, int port)
socket_listen	sock.h	/^int socket_listen(int fd, int backlog);$/;"	p	signature:(int fd, int backlog)
socket_listen	socket/socket_base.h	/^int socket_listen(int fd, int backlog);$/;"	p	signature:(int fd, int backlog)
socket_listen	socket_base.h	/^int socket_listen(int fd, int backlog);$/;"	p	signature:(int fd, int backlog)
socket_recv	sock.h	/^int socket_recv(int fd, void *buf, int size);$/;"	p	signature:(int fd, void *buf, int size)
socket_recv	sock.h	/^int socket_recv(struct sock *sck, void *buf, int size);$/;"	p	signature:(struct sock *sck, void *buf, int size)
socket_recv	socket/socket_base.h	/^int socket_recv(int fd, void *buf, int size);$/;"	p	signature:(int fd, void *buf, int size)
socket_recv	socket_base.h	/^int socket_recv(int fd, void *buf, int size);$/;"	p	signature:(int fd, void *buf, int size)
socket_recv_tm	sock.h	/^int socket_recv_tm(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_recvfrom	sock.h	/^int socket_recvfrom(int fd, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_recvfrom	socket/socket_base.h	/^int socket_recvfrom(int fd, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_recvfrom	socket_base.h	/^int socket_recvfrom(int fd, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_send	sock.h	/^int socket_send(int fd, void *buf, int size);$/;"	p	signature:(int fd, void *buf, int size)
socket_send	sock.h	/^int socket_send(struct sock *sck, void *buf, int size);$/;"	p	signature:(struct sock *sck, void *buf, int size)
socket_send	socket/socket_base.h	/^int socket_send(int fd, void *buf, int size);$/;"	p	signature:(int fd, void *buf, int size)
socket_send	socket_base.h	/^int socket_send(int fd, void *buf, int size);$/;"	p	signature:(int fd, void *buf, int size)
socket_send_tm	sock.h	/^int socket_send_tm(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_sendto	sock.h	/^int socket_sendto(int fd, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_sendto	socket/socket_base.h	/^int socket_sendto(int fd, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_sendto	socket_base.h	/^int socket_sendto(int fd, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_startup	sock.h	/^int socket_startup(int domain, int type, u_short port, const char *ip);$/;"	p	signature:(int domain, int type, u_short port, const char *ip)
socket_startup	sock.h	/^int socket_startup(int domain, int type, void *addr, u_short port, \\$/;"	p	signature:(int domain, int type, void *addr, u_short port, \ const char *ip, int is_ser)
socket_startup	sock.h	/^int socket_startup(u_short *port);$/;"	p	signature:(u_short *port)
socket_t	sock.h	/^typedef struct socket socket_t;$/;"	t	typeref:struct:socket
socket_time_connect	sock.h	/^int socket_time_connect(int fd, struct sockaddr_in *cli_addr, int tm_ms);$/;"	p	signature:(int fd, struct sockaddr_in *cli_addr, int tm_ms)
socket_time_connect	sock.h	/^int socket_time_connect(int fd, void *cli_addr, int tm_ms);$/;"	p	signature:(int fd, void *cli_addr, int tm_ms)
socket_time_connect	socket/socket_base.h	/^int socket_time_connect(int fd, void *cli_addr, int tm_ms);$/;"	p	signature:(int fd, void *cli_addr, int tm_ms)
socket_time_connect	socket_base.h	/^int socket_time_connect(int fd, void *cli_addr, int tm_ms);$/;"	p	signature:(int fd, void *cli_addr, int tm_ms)
socket_time_recv	sock.h	/^int socket_time_recv(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_time_recv	socket/socket_base.h	/^int socket_time_recv(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_time_recv	socket_base.h	/^int socket_time_recv(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_time_send	sock.h	/^int socket_time_send(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_time_send	socket/socket_base.h	/^int socket_time_send(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_time_send	socket_base.h	/^int socket_time_send(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_type	sock.h	/^static struct socket_type {$/;"	s
socket_type	sock.h	/^struct socket_type {$/;"	s
socket_type	sock.h	/^} socket_type[] = {$/;"	v	typeref:struct:socket_type
socket_type	socket/socket_property.h	/^struct socket_type {$/;"	s
socket_type	socket_base.h	/^static struct socket_type {$/;"	s
socket_type	socket_base.h	/^} socket_type[] = {$/;"	v	typeref:struct:socket_type
socket_type	socket_property.h	/^struct socket_type {$/;"	s
socket_type::type_macro	sock.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
socket_type::type_macro	socket/socket_property.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
socket_type::type_macro	socket_base.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
socket_type::type_macro	socket_property.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
socket_type::type_name	sock.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
socket_type::type_name	socket/socket_property.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
socket_type::type_name	socket_base.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
socket_type::type_name	socket_property.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
speed	socket/socket_property.h	/^    __u16   speed;          \/* The forced speed, 10Mb, 100Mb, gigabit *\/  $/;"	m	struct:ethtool_cmd	access:public
speed	socket_property.h	/^    __u16   speed;          \/* The forced speed, 10Mb, 100Mb, gigabit *\/  $/;"	m	struct:ethtool_cmd	access:public
src_id	socket_msg.h	/^    mod_id_t        src_id;$/;"	m	struct:msg	access:public
src_ip	socket/socket_header.h	/^        unsigned char src_ip[4];$/;"	m	struct:frame_arp	access:public
src_mac	socket/socket_header.h	/^        unsigned char src_mac[6];$/;"	m	struct:frame_arp	access:public
src_mac	socket/socket_header.h	/^        unsigned char src_mac[6];$/;"	m	struct:frame_hdr	access:public
src_mac	socket/socket_header.h	/^    unsigned char src_mac[6];$/;"	m	struct:ether_hdr	access:public
startup_inet_client	socket/socket_base.h	/^int startup_inet_client(int type, struct sockaddr_in *addr, \\$/;"	p	signature:(int type, struct sockaddr_in *addr, \ const char *ip, u_short port)
startup_inet_client	socket_base.h	/^int startup_inet_client(int type, struct sockaddr_in *addr, \\$/;"	p	signature:(int type, struct sockaddr_in *addr, \ const char *ip, u_short port)
startup_inet_server	socket/socket_base.h	/^int startup_inet_server(int type, const char *ip, \\$/;"	p	signature:(int type, const char *ip, \ u_short port)
startup_inet_server	socket_base.h	/^int startup_inet_server(int type, const char *ip, \\$/;"	p	signature:(int type, const char *ip, \ u_short port)
startup_local_client	socket/socket_base.h	/^int startup_local_client(int type, struct sockaddr_un *addr, const char *path);$/;"	p	signature:(int type, struct sockaddr_un *addr, const char *path)
startup_local_client	socket_base.h	/^int startup_local_client(int type, struct sockaddr_un *addr, const char *path);$/;"	p	signature:(int type, struct sockaddr_un *addr, const char *path)
startup_local_server	socket/socket_base.h	/^int startup_local_server(int type, const char *path);$/;"	p	signature:(int type, const char *path)
startup_local_server	socket_base.h	/^int startup_local_server(int type, const char *path);$/;"	p	signature:(int type, const char *path)
supported	socket/socket_property.h	/^    __u32   supported;      \/* Features this interface supports *\/  $/;"	m	struct:ethtool_cmd	access:public
supported	socket_property.h	/^    __u32   supported;      \/* Features this interface supports *\/  $/;"	m	struct:ethtool_cmd	access:public
swap	macro.h	51;"	d
sz	sock.h	/^        char *sz;$/;"	m	union:sock::__anon1	access:public
tcp_client_connect	sock.h	/^int tcp_client_connect(struct sock *sck, const char *ip, int port);$/;"	p	signature:(struct sock *sck, const char *ip, int port)
tcp_client_connect	sock.h	/^int tcp_client_connect(struct sock *sck, const char *ip, u_short port);$/;"	p	signature:(struct sock *sck, const char *ip, u_short port)
tcp_client_connect	sock.h	/^int tcp_client_connect(struct socket *sck, int domain, const char *ip, u_short port);$/;"	p	signature:(struct socket *sck, int domain, const char *ip, u_short port)
tcp_client_time_connect	sock.h	/^int tcp_client_time_connect(struct sock *sck, const char *ip, int port, int tm_ms);$/;"	p	signature:(struct sock *sck, const char *ip, int port, int tm_ms)
tcp_client_time_connect	sock.h	/^int tcp_client_time_connect(struct sock *sck, const char *ip, u_short port, int tm_ms);$/;"	p	signature:(struct sock *sck, const char *ip, u_short port, int tm_ms)
tcp_client_time_connect	sock.h	/^int tcp_client_time_connect(struct socket *sck, int domain, const char *ip, u_short port, int tm_ms);$/;"	p	signature:(struct socket *sck, int domain, const char *ip, u_short port, int tm_ms)
tcp_server_create	sock.h	/^int tcp_server_create(struct sock *sck, int port);$/;"	p	signature:(struct sock *sck, int port)
tcp_server_create	sock.h	/^int tcp_server_create(struct sock *sck, int port, on_recv_runtine on_recv, on_close_runtine on_close);$/;"	p	signature:(struct sock *sck, int port, on_recv_runtine on_recv, on_close_runtine on_close)
tcp_server_create	sock.h	/^int tcp_server_create(struct sock *sck, u_short *port);$/;"	p	signature:(struct sock *sck, u_short *port)
tcp_server_create	sock.h	/^int tcp_server_create(struct socket *sck, int domain, u_short port, const char *ip);$/;"	p	signature:(struct socket *sck, int domain, u_short port, const char *ip)
tcp_server_stop	sock.h	/^void tcp_server_stop(struct sock *sck);$/;"	p	signature:(struct sock *sck)
tcp_server_stop	sock.h	/^void tcp_server_stop(struct socket *sck);$/;"	p	signature:(struct socket *sck)
thread	libsc_timer.h	/^    pthread_t thread;$/;"	m	struct:libsc_timer_impl	access:public
thread	timer.h	/^    pthread_t thread;$/;"	m	struct:timer_impl	access:public
thread_id	socket_msg.h	/^    pthread_t       thread_id;      \/* thread id *\/$/;"	m	struct:msg_mod_cfg	access:public
thread_impl	thread.h	/^typedef struct thread_impl $/;"	s
thread_impl::active	thread.h	/^    int active;$/;"	m	struct:thread_impl	access:public
thread_impl::delete	thread.h	/^    int delete;$/;"	m	struct:thread_impl	access:public
thread_impl::done	thread.h	/^    int done;$/;"	m	struct:thread_impl	access:public
thread_impl::keep	thread.h	/^    int keep;$/;"	m	struct:thread_impl	access:public
thread_impl::lock	thread.h	/^    pthread_mutex_t lock;$/;"	m	struct:thread_impl	access:public
thread_impl::pid	thread.h	/^    pthread_t pid;$/;"	m	struct:thread_impl	access:public
thread_impl::ready	thread.h	/^    pthread_cond_t ready;$/;"	m	struct:thread_impl	access:public
thread_impl::run	thread.h	/^    int run;$/;"	m	struct:thread_impl	access:public
thread_impl::worker	thread.h	/^    pthread_worker_t worker;$/;"	m	struct:thread_impl	access:public
thread_runtine	sock.h	/^typedef void* (*thread_runtine)(void *arg);$/;"	t
thread_runtine	socket/socket_app.h	/^typedef void* (*thread_runtine)(void *arg);$/;"	t
thread_runtine	socket_app.h	/^typedef void* (*thread_runtine)(void *arg);$/;"	t
thread_t	thread.h	/^} thread_t;$/;"	t	typeref:struct:thread_impl
time_b	libsc_timer.h	/^    int time_b;$/;"	m	struct:libsc_timer_impl	access:public
time_b	timer.h	/^    int time_b;$/;"	m	struct:timer_impl	access:public
time_r	libsc_timer.h	/^    int time_r;$/;"	m	struct:libsc_timer_impl	access:public
time_r	timer.h	/^    int time_r;$/;"	m	struct:timer_impl	access:public
timer	timer.h	/^typedef struct timer {$/;"	s
timer	timer.h	/^}timer;$/;"	t	typeref:struct:timer
timer::__anon2::c	timer.h	/^        char c;$/;"	m	union:timer::__anon2	access:public
timer::__anon2::i	timer.h	/^        int i;$/;"	m	union:timer::__anon2	access:public
timer::__anon2::p	timer.h	/^        void *p;$/;"	m	union:timer::__anon2	access:public
timer::__anon3::c	timer.h	/^        char c;$/;"	m	union:timer::__anon3	access:public
timer::__anon3::i	timer.h	/^        int i;$/;"	m	union:timer::__anon3	access:public
timer::__anon3::p	timer.h	/^        void *p;$/;"	m	union:timer::__anon3	access:public
timer::__anon5::c	timer.h	/^        char c;$/;"	m	union:timer::__anon5	access:public
timer::__anon5::i	timer.h	/^        int i;$/;"	m	union:timer::__anon5	access:public
timer::__anon5::p	timer.h	/^        void *p;$/;"	m	union:timer::__anon5	access:public
timer::impl	timer.h	/^    struct timer_impl *impl;$/;"	m	struct:timer	typeref:struct:timer::timer_impl	access:public
timer_cb	libsc_timer.h	/^typedef void (*timer_cb)(struct libsc_timer *tm);$/;"	t
timer_cb	timer.h	/^typedef void (*timer_cb)(struct timer *tm);$/;"	t
timer_creat	timer.h	/^struct timer * timer_creat(int tm_ms, timer_cb cb, bool repeat);$/;"	p	signature:(int tm_ms, timer_cb cb, bool repeat)
timer_destroy	timer.h	/^void timer_destroy(struct timer *timer);$/;"	p	signature:(struct timer *timer)
timer_impl	timer.h	/^typedef struct timer_impl {$/;"	s
timer_impl::active	timer.h	/^    int active;$/;"	m	struct:timer_impl	access:public
timer_impl::cb	timer.h	/^    timer_cb cb;$/;"	m	struct:timer_impl	access:public
timer_impl::delete	timer.h	/^    int delete;$/;"	m	struct:timer_impl	access:public
timer_impl::repeat	timer.h	/^    int repeat;$/;"	m	struct:timer_impl	access:public
timer_impl::thread	timer.h	/^    pthread_t thread;$/;"	m	struct:timer_impl	access:public
timer_impl::time_b	timer.h	/^    int time_b;$/;"	m	struct:timer_impl	access:public
timer_impl::time_r	timer.h	/^    int time_r;$/;"	m	struct:timer_impl	access:public
timer_impl_t	timer.h	/^}timer_impl_t;$/;"	t	typeref:struct:timer_impl
timer_reset	timer.h	/^void timer_reset(struct timer *timer);$/;"	p	signature:(struct timer *timer)
timer_start	timer.h	/^void timer_start(struct timer *timer);$/;"	p	signature:(struct timer *timer)
timer_stop	timer.h	/^void timer_stop(struct timer *timer);$/;"	p	signature:(struct timer *timer)
transceiver	socket/socket_property.h	/^    __u8    transceiver;    \/* Which transceiver to use *\/  $/;"	m	struct:ethtool_cmd	access:public
transceiver	socket_property.h	/^    __u8    transceiver;    \/* Which transceiver to use *\/  $/;"	m	struct:ethtool_cmd	access:public
type	sock.h	/^    data_type type;$/;"	m	struct:sock_data	access:public
type	sock.h	/^    socket_data_type type;$/;"	m	struct:socket_data	access:public
type_macro	sock.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
type_macro	socket/socket_property.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
type_macro	socket_base.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
type_macro	socket_property.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
type_name	sock.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
type_name	socket/socket_property.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
type_name	socket_base.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
type_name	socket_property.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
udp_broadcast_recv	sock.h	/^int udp_broadcast_recv(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ char **cast_info, int size)
udp_broadcast_recv	socket/socket_app.h	/^int udp_broadcast_recv(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ char *cast_info, int size)
udp_broadcast_recv	socket_app.h	/^int udp_broadcast_recv(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ char *cast_info, int size)
udp_broadcast_send	sock.h	/^int udp_broadcast_send(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ const char *cast_info)
udp_broadcast_send	socket/socket_app.h	/^int udp_broadcast_send(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ const char *cast_info)
udp_broadcast_send	socket_app.h	/^int udp_broadcast_send(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ const char *cast_info)
udp_multicast_recv	sock.h	/^int udp_multicast_recv(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ char **cast_info, int size)
udp_multicast_recv	socket/socket_app.h	/^int udp_multicast_recv(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ char *cast_info, int size)
udp_multicast_recv	socket_app.h	/^int udp_multicast_recv(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ char *cast_info, int size)
udp_multicast_send	sock.h	/^int udp_multicast_send(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ const char *cast_info)
udp_multicast_send	socket/socket_app.h	/^int udp_multicast_send(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ const char *cast_info)
udp_multicast_send	socket_app.h	/^int udp_multicast_send(const char *cast_ip, int port, int cast_times,\\$/;"	p	signature:(const char *cast_ip, int port, int cast_times,\ const char *cast_info)
udp_socket_data_recv	sock.h	/^int udp_socket_data_recv(int fd, socket_data_type *type, \\$/;"	p	signature:(int fd, socket_data_type *type, \ void *buf, int size)
udp_socket_data_recv	sock.h	/^int udp_socket_data_recv(int fd, socket_data_type *type, void *buf, int size);$/;"	p	signature:(int fd, socket_data_type *type, void *buf, int size)
un_addr	socket/socket_app.h	/^        struct sockaddr_un un_addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr_un	access:public
un_addr	socket/socket_app.h	/^        struct sockaddr_un un_addr;$/;"	m	union:socket_impl::__anon3	typeref:struct:socket_impl::__anon3::sockaddr_un	access:public
un_addr	socket_app.h	/^        struct sockaddr_un un_addr;$/;"	m	union:socket_impl::__anon2	typeref:struct:socket_impl::__anon2::sockaddr_un	access:public
un_addr	socket_msg.h	/^    struct sockaddr_un  un_addr;$/;"	m	struct:shm_entry	typeref:struct:shm_entry::sockaddr_un	access:public
value	sock.h	/^    } value;$/;"	m	struct:sock_data	typeref:union:sock_data::__anon1	access:public
value	sock.h	/^    } value;$/;"	m	struct:socket_data	typeref:union:socket_data::__anon1	access:public
worker	thread.h	/^    pthread_worker_t worker;$/;"	m	struct:thread_impl	access:public
