#! /bin/bash
#脚本功能：
	#创建shell脚本模板
#创建时间：
	#2014-10-27 20：33：31

ignore=0
name=""
arg_flag=0

function print_usage()
{
    echo -e "\e[1;31m#-------------------Shell Usage------------------#"
    echo "Usage  : $(basename $0) [options] script-name"
    echo "Options: "
    echo "     -h,--help    Show usage of shell"
    echo "     -i,--ignore  Ignore when detect the script shell is already existed"
    echo -e "#-------------------Shell Usage-------------------#\e[0m"
}

function parser_args()
{
	TEMP=`getopt -o hia --long help,ignore,add-args \
     -n 'mksh' -- "$@"`

    if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

    # Note the quotes around `$TEMP': they are essential!
    # set 会重新排列参数的顺序，也就是改变$1,$2...$n的值，这些值在getopt中重新排列过了
    eval set -- "$TEMP"

    #经过getopt的处理，下面处理具体选项。
    while test -n "$1" ; do
        case "$1" in
            -h|--help) print_usage $@; shift ;;
            -i|--ignore) ignore=1 ; shift ;;
            -a|--add-args) arg_flag=1 ; shift ;;
            --) shift ; break ;;
            *) echo "Internal error!" ; exit 1 ;;
        esac
    done

    for arg in $@ ; do
        name="$arg"
    done

    return 0
}

# deal with args
parser_args $@

#保证必须有脚本的名称:
if test -z "$name" ; then
	exit 1
fi

path=$(pwd)
if test -f "$path/$name" ; then
    if test $ignore -ne 1 ; then
	    echo -n 脚本已存在，是否删除？\(y/n\) : 
	    read yn
	    if [[ "$yn" = "y" || "$yn" = "Y" ]] ; then
		    rm "$path/$name" >&2
	    else
		    exit 1
	    fi
    else 
		rm "$path/$name" >&2
    fi
fi

#为脚本写入脚本头信息
echo "#! /bin/bash
# Name : "$name"
# Func : 
# Time : "$(date +"%Y-%m-%d %H:%M:%S")"
" > $path/$name

if test $arg_flag -eq 1 ; then
    cat $SHELL_TMP_PATH/mksh.sh >> $path/$name
fi

#为脚本添加执行权限
chmod u+x $path/$name

exit 0
